getwd()
library(dplyr)
library(RJDemetra)
SUE <- ipi_c_eu[, "TR"]
SUE
head(SUE)
plot(SUE)
model_sa<-tramoseats(SUE, spec ="RSA3")
View(model_sa)
my_reg <- regarima_tramoseats(SUE,spec ="TR3")
View(my_reg)
model_sa$final$series
head(model_sa$final$series)
model_regarima <- regarima_tramoseats(SUE,spec ="TR3")
model_regarima$forecast
summary(model_sa)
model_sa
model_regarima
library(RJDemetra)
SUE <- ipi_c_eu[, "TR"]
plot(SUE)
plot(SUE,color="blue" )
plot(SUE,col="blue" )
base::plot(SUE)
base::plot(SUE,col="blue")
library(RJDemetra)
SUE <- ipi_c_eu[, "TR"]
base::plot(SUE,col="blue")
model_sa<-tramoseats(SUE, spec ="RSA3")
num_var <- 3.14
class(num_var)
typeof(num_var)
class(num_var)
class(double_var)
double_var <- 3.14
class(num_var)
class(double_var)
typeof(num_var)
typeof(double_var)
typeof(as.numeric(3.14))
# Using as.integer()
x <- as.integer(5)
typeof(x)
typeof(y)
# Direct assignment
y <- 10L  # The 'L' suffix denotes an integer
typeof(y)
double_number <- 3.99
integer_result <- as.integer(double_number)  # Rounds down to 3
integer_result
greeting <- "Hello, "
name <- "Fatih"
full_greeting <- paste(greeting, name)
full_greeting
# Extracting a substring
text <- "R Programming"
sub_text <- substr(text, start = 1, stop = 1)  # Extracts the first character
sub_text
a <- 1.234
typeof(a)
class(a)
class(as.character(a))
b <- "1.234"
class(b)
class(as.numeric(b)) # convert to character
is_raining <- TRUE
is_raining
temperature <- 25
is_hot <- temperature > 30  # Evaluates to FALSE
is_hot
is_even <- logical(1)  # Creates a logical vector with one TRUE value
is_even
is_even <- logical(2)  # Creates a logical vector with one TRUE value
is_even
all_positive <- all(c(TRUE, TRUE, TRUE))  # Checks if all values are TRUE
all_positive
class(is_raining)
typeof(is_raining)
c <- 4 > 3
isTRUE(c)
all_positive <- all(c(1, 2, -3))  # Checks if all values are TRUE
all_positive <- all(c(TRUE, TRUE, FALSE))  # Checks if all values are TRUE
all_positive
if (is_raining) {
cat("Don't forget your umbrella!\n")
} else {
cat("Enjoy the sunshine!\n")
}
has_license <- TRUE
is_old_enough <- TRUE
can_drive <- has_license & is_old_enough  # Evaluates to TRUE
can_drive
any(c(TRUE,FALSE))
!isTRUE(c)
6 < 5 & 6 > 7 # If FALSE in both cases, the result returns FALSE
3 < 5 & 8 > 7 # If TRUE in both cases, the result returns TRUE
3 < 5 & 6 > 7 # If one case is FALSE and the other case is TRUE, the result is FALSE.
6 < 5 & 6 > 7 # If FALSE in both cases, the result returns FALSE
(5==4) | (3!=4) # If either condition is TRUE,returns TRUE
# Get the current system time
current_time <- Sys.time()
current_time
# Creating a POSIXct object
timestamp <- as.POSIXct("2023-09-01 14:05:00", format = "%Y-%m-%d %H:%M:%S")
timestamp
class(timestamp)
duration <- timestamp2 - timestamp1
duration <- current_time - timestamp
duration
# Creating a POSIXct object
timestamp <- as.POSIXct("2023-09-26 14:01:00", format = "%Y-%m-%d %H:%M:%S")
duration <- current_time - timestamp
duration
# Add 3 days to a date
new_date <- my_date + days(3)
# Creating a Date object
my_date <- as.Date("2023-09-01")
# Add 3 days to a date
new_date <- my_date + days(3)
class(my_date)
# Add 3 days to a date
new_date <- my_date + 3
new_date
# Creating a Date object
my_date <- as.Date("2023-09-26")
# Add 3 days to a date
new_date <- my_date + 3
new_date
# Formatting a date as a character string
formatted_date <- format(my_date, format = "%Y-%m-%d")
formatted_date
parsed_date
# Parsing a character string into a date object
parsed_date <- as.Date("2023-09-26", format = "%Y-%m-%d")
parsed_date
# Formatting a date as a character string
formatted_date <- format(my_date, format = "%Y/%m/%d")
formatted_date
# Creating complex numbers
z1 <- complex(real = 3, imaginary = 2)
z1
class(z1)
z2
z2 <- 1 + 4i
z2
class(z2)
# Creating a numeric vector from 1 to 10
numeric_seq <- seq(1, 10, by = 1)
numeric_seq
# Creating a vector with three 'hello' elements
hello_vector <- rep("hello", times = 3)
numeric_seq
# Creating a numeric vector from 1 to 10
numeric_seq <- seq(1, 10, by = 1)
numeric_seq
# Creating a vector with three 'hello' elements
hello_vector <- rep("hello", times = 3)
hello_vector
# Mixing data types will coerce to a common type
mixed_vector <- c(1, "two", TRUE)
mixed_vector
class(mixed_vector)
# Accessing elements of a vector
numeric_vector[3]  # Access the third element of numeric_vector
# Creating a numeric vector
numeric_vector <- c(1, 2, 3, 4, 5)
# Accessing elements of a vector
numeric_vector[3]  # Access the third element of numeric_vector
# Get the length of a vector
vector_length <- length(numeric_vector)
vector_length
# Vectorized addition
a <- c(1, 2, 3)
b <- c(4, 5, 6)
result <- a + b  # Element-wise addition
c(..., recursive = FALSE)
# Creating a numeric vector
numeric_vector <- c(1, 2, 3, 4, 5)
print(numeric_vector)
# Creating a character vector
character_vector <- c("apple", "banana", "cherry")
print(character_vector)
# Combining numeric and character values
mixed_vector <- c(1, "two", 3, "four")
print(mixed_vector)
print(class(mixed_vector))
class(mixed_vector)
# Creating nested vectors and combining them recursively
# The nested vectors are flattened into a single vector.
nested_vector <- c(1, c(2, 3), c(4, 5, c(6, 7)))
print(nested_vector)
# Create a sequence of 5 values from 2 to 10
seq(2, 10, length.out = 5)
# Create a sequence of integers from 10 to 1 in reverse order
seq(10, 1)
# Create a sequence of character strings
seq("A", "F")
# Repeat each element of the vector with different frequencies
rep(c("A", "B", "C"), times = c(3, 2, 4))
# Repeat the values from 1 to 3 to create a vector of length 10
rep(1:3, length.out = 10)
# Create a matrix
my_matrix <- matrix(1:4, nrow = 2)
# Repeat the entire matrix 3 times
rep(my_matrix, times = 3)
# Repeat the entire matrix 3 times
rep(my_matrix, times = 3)
# Create a matrix
my_matrix <- matrix(1:4, nrow = 2)
my_matrix
# Repeat the entire matrix 3 times
rep(my_matrix, times = 3)
# Create a vector with duplicate values
my_vector <- c(1, 2, 2, 3, 4, 4, 5)
# Use the unique() function to extract unique elements
unique(my_vector)
# Create a vector with duplicate values
my_vector <- c(1, 2, 2, 3, 4, 4, 5)
# Use the duplicated() function to identify duplicate elements
duplicates <- duplicated(my_vector)
# Print the result
print(duplicates)
# Get the values that are duplicated
duplicated_values <- my_vector[duplicates]
print(duplicated_values)
# Create a vector with duplicate values
my_vector <- c(1, 2, 2, 3, 4, 4, 5)
# Use the duplicated() function to identify duplicates from the last occurrence
duplicates_last <- duplicated(my_vector, fromLast = TRUE)
# Print the result
print(duplicates_last)
# Get the values that are duplicated from the last occurrence
duplicated_values_last <- my_vector[duplicates_last]
print(duplicated_values_last)
# Create a vector with duplicate values
my_vector <- c(1, 2, 2, 3, 4, 4, 5)
# Use the `!` operator to negate the duplicated values and get unique values
unique_values <- my_vector[!duplicated(my_vector)]
# Print the unique values
print(unique_values)
# Create a character vector with duplicate strings
my_strings <- c("apple", "banana", "apple", "cherry", "banana")
# Use the duplicated() function to identify duplicate strings
duplicates_strings <- duplicated(my_strings)
# Print the result
print(duplicates_strings)
# Get the duplicated strings
duplicated_strings <- my_strings[duplicates_strings]
print(duplicated_strings)
# Create a numeric vector
numeric_vector <- c(5, 2, 8, 1, 3)
# Sort the vector in ascending order
sorted_vector <- sort(numeric_vector)
# Print the result
print(sorted_vector)
# Create a character vector
character_vector <- c("apple", "banana", "cherry", "date", "grape")
# Sort the vector in alphabetical order
sorted_vector <- sort(character_vector)
# Print the result
print(sorted_vector)
# Create a numeric vector
numeric_vector <- c(5, 2, 8, 1, 3)
# Sort the vector in descending order
sorted_vector <- sort(numeric_vector, decreasing = TRUE)
# Print the result
print(sorted_vector)
# Create a factor vector
factor_vector <- factor(c("high", "low", "medium", "low", "high"))
# Sort the factor vector in alphabetical order
sorted_vector <- sort(factor_vector)
# Print the result
print(sorted_vector)
# Create a numeric vector
numeric_vector <- c(5, 2, 8, 1, 3)
# Sort the vector in ascending order and store the index order
sorted_indices <- order(numeric_vector)
sorted_vector <- numeric_vector[sorted_indices]
# Print the result
print(sorted_vector)
sorted_indices
# Print the result
print(sorted_vector)
# Create a numeric vector
my_vector <- c(10, 5, 15, 3, 8)
# Find indices where values are greater than 8
indices_greater_than_8 <- which(my_vector > 8)
# Print the result
print(indices_greater_than_8)
# Create a vector with missing values (NA)
my_vector <- c(2, NA, 5, NA, 8)
# Find indices of missing values
indices_of_na <- which(is.na(my_vector))
# Print the result
print(indices_of_na)
# Create a matrix
my_matrix <- matrix(1:9, nrow = 3)
# Find indices where values are greater than 5
indices_greater_than_5 <- which(my_matrix > 5, arr.ind = TRUE)
# Print the result
print(indices_greater_than_5)
# Create a character vector
my_vector <- c("apple", "banana", "cherry", "banana", "apple")
# Find indices where values are "banana"
indices_banana <- which(my_vector == "banana")
# Print the result
print(indices_banana)
