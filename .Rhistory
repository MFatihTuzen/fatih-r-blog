sales_df
# Generate a sequence of daily dates
daily_dates <- seq(ymd("2023-01-01"), by = "day", length.out = 30)
# Create a sample dataset with random values for each day
daily_data <- data.frame(
date = daily_dates,
value = runif(30, min = 100, max = 200)
)
# View the first few rows of the dataset
head(daily_data)
#| message: false
library(dplyr)
# Sample dataset: daily values over one month
set.seed(123)
time_series_data <- data.frame(
date = seq(ymd("2023-01-01"), by = "day", length.out = 30),
value = runif(30, min = 50, max = 150)
)
# Aggregating the data by week
weekly_data <- time_series_data |>
mutate(week = floor_date(date, "week")) |>
group_by(week) |>
summarize(weekly_avg = mean(value))
# View the aggregated data
weekly_data
# Example of irregular dates (missing some days)
irregular_dates <- c(ymd("2023-01-01"), ymd("2023-01-02"), ymd("2023-01-05"),
ymd("2023-01-07"), ymd("2023-01-10"))
# Create a dataset with missing dates
irregular_data <- data.frame(
date = irregular_dates,
value = runif(5, min = 100, max = 200)
)
# Complete the time series by filling missing dates
complete_dates <- data.frame(
date = seq(min(irregular_data$date), max(irregular_data$date), by = "day")
)
# Join the original data with the complete sequence of dates
complete_data <- merge(complete_dates, irregular_data, by = "date", all.x = TRUE)
# View the completed data with missing values
complete_data
# Converting a ts object to a data frame with dates
ts_data <- ts(sales_data, start = c(2020, 1), frequency = 12)
# Create a data frame from the ts object
df_ts <- data.frame(
date = seq(ymd("2020-01-01"), by = "month", length.out = length(ts_data)),
sales = as.numeric(ts_data)
)
# Extract year and month using lubridate
df_ts <- df_ts %>%
mutate(year = year(date), month = month(date))
# View the data with extracted components
df_ts
#| eval: false
parse_date_time(x, orders, tz = "UTC", quiet = FALSE)
# Example date-time strings in various formats
dates <- c("2024-01-15", "01/16/2024", "March 17, 2024", "18-04-2024")
# Parse the dates using parse_date_time
parsed_dates <- parse_date_time(dates, orders = c("ymd", "mdy", "dmy", "B d, Y"))
# Display the parsed dates
parsed_dates
hours(3)
# Define task durations
task_duration <- hours(3)  # Each task takes 3 hours
start_time <- ymd_hms("2024-01-01 09:00:00")
# Schedule three tasks
schedule <- start_time + task_duration * 0:2
# Display the schedule for tasks
schedule
rm(list=ls())
# Load packages
library(openxlsx)
library(dplyr)
library(ggplot2)
#| message: false
# Load packages
library(openxlsx)
library(dplyr)
library(ggplot2)
# Create sample sales data
sales_data <- data.frame(
Date = seq(as.Date("2024-01-01"), by = "month", length.out = 12),
Product = rep(c("Product A", "Product B"), each = 6),
Sales = round(runif(12, 1000, 5000)),
Revenue = round(runif(12, 10000, 50000))
)
# Calculate monthly summaries
monthly_summary <- sales_data %>%
group_by(Product) %>%
summarise(
Total_Sales = sum(Sales),
Avg_Revenue = mean(Revenue),
Max_Revenue = max(Revenue)
)
monthly_summary
sales_data <- data.frame(
Date = seq.Date(as.Date("2023-01-01"), as.Date("2023-12-31"), by = "month"),
Region = rep(c("North", "South", "East", "West"), 3),
Sales = round(runif(12, 10000, 50000), 2),
Units = round(runif(12, 100, 500)),
Profit = round(runif(12, 5000, 25000), 2)
)
sales_data <- data.frame(
Date = seq.Date(as.Date("2023-01-01"), as.Date("2023-12-31"), by = "month"),
Region = rep(c("North", "South", "East", "West"), 3),
Sales = round(runif(12, 10000, 50000), 2),
Units = round(runif(12, 100, 500)),
Profit = round(runif(12, 5000, 25000), 2)
)
# Create regional summary
regional_summary <- sales_data %>%
group_by(Region) %>%
summarise(
Total_Sales = sum(Sales),
Avg_Units = mean(Units),
Total_Profit = sum(Profit)
)
regional_summary
sales_data
# Create new workbook
wb <- createWorkbook()
# Add worksheets
addWorksheet(wb, "Summary")
addWorksheet(wb, "Details")
addWorksheet(wb, "Charts")
# Create a title style
title_style <- createStyle(
fontSize = 14,
fontColour = "#FFFFFF",
halign = "center",
fgFill = "#4F81BD",
textDecoration = "bold",
border = "TopBottom",
borderColour = "#4F81BD"
)
# Create header style
header_style <- createStyle(
fontSize = 12,
fontColour = "#000000",
halign = "center",
fgFill = "#DCE6F1",
textDecoration = "bold",
border = "bottom",
borderColour = "#4F81BD"
)
# Write title
writeData(wb, "Summary", "Sales Performance Report 2023", startCol = 1, startRow = 1)
mergeCells(wb, "Summary", cols = 1:5, rows = 1)
addStyle(wb, "Summary", title_style, rows = 1, cols = 1:5)
# Write data with headers
writeData(wb, "Summary", sales_data, startCol = 1, startRow = 3)
addStyle(wb, "Summary", header_style, rows = 3, cols = 1:5)
# Format numbers
number_style <- createStyle(numFmt = "#,##0.00")
addStyle(wb, "Summary", number_style, rows = 4:15, cols = 3:5, gridExpand = TRUE)
# Adjust column widths
setColWidths(wb, "Summary", cols = 1:5, widths = "auto")
# Create monthly sales trend chart
sales_plot <- ggplot(sales_data, aes(x = Date, y = Sales)) +
geom_line(color = "#4F81BD", size = 1.2) +
geom_point(color = "#4F81BD", size = 3) +
theme_minimal() +
labs(title = "Monthly Sales Trend",
x = "Month",
y = "Sales ($)") +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
# Save plot to workbook
print(sales_plot)
insertPlot(wb, "Charts", width = 8, height = 6,
startCol = 1, startRow = 1)
# Create regional summary
regional_summary <- sales_data %>%
group_by(Region) %>%
summarise(
Total_Sales = sum(Sales),
Avg_Units = mean(Units),
Total_Profit = sum(Profit)
)
# Write regional summary to Details sheet
writeData(wb, "Details", "Regional Performance Summary", startCol = 1, startRow = 1)
mergeCells(wb, "Details", cols = 1:4, rows = 1)
addStyle(wb, "Details", title_style, rows = 1, cols = 1:4)
writeData(wb, "Details", regional_summary, startCol = 1, startRow = 3)
addStyle(wb, "Details", header_style, rows = 3, cols = 1:4)
# Save the workbook
saveWorkbook(wb, "Sales_Report_2023.xlsx", overwrite = TRUE)
library(OECD)
get_dataset()
datasets <- get_datasets()
install.packages("OECD")
install.packages("OECD")
library(OECD)
datasets <- get_datasets()
datasets <- get_datasets()
library(devtools)
install_github("expersso/OECD")
detach("package:OECD", unload = TRUE)
install_github("expersso/OECD")
library(OECD)
dataset <- "OECD.SDD.TPS/DSD_LFS@DF_IALFS_UNE_M,1.0"
filter <- "BEL+AUS+AUT+CAN+DNK+EST+FIN+FRA+DEU+GRC+HUN+ISL+IRL+ITA+JPN+LTU+LVA+LUX+NLD+NZL+POL+NOR+PRT+SVK+SVN+ESP+SWE+CHE+USA+GBR+TUR..PT_LF_SUB._Z.Y._T.Y_GE15..M"
df <- get_dataset(dataset, filter, start_time = 2014)
View(df)
url = "https://sdmx.oecd.org/public/rest/data/OECD.SDD.STES,DSD_STES@DF_CLI/.M.LI...AA...H?startPeriod=2023-02&dimensionAtObservation=AllDimensions&format=csvfilewithlabels"
df<-read.csv(url)
View(df)
url2 <- "https://sdmx.oecd.org/public/rest/dataflow/OECD.SDD.TPS/DSD_LFS@DF_IALFS_UNE_M/1.0?references=all"
df<-read.csv(url)
df<-read.csv(url2)
View(df)
url2 <- "https://sdmx.oecd.org/public/rest/data/OECD.SDD.TPS,DSD_LFS@DF_IALFS_UNE_M,1.0/BEL+AUS+AUT+CAN+DNK+EST+FIN+FRA+DEU+GRC+HUN+ISL+IRL+ITA+JPN+LTU+LVA+LUX+NLD+NZL+POL+NOR+PRT+SVK+SVN+ESP+SWE+CHE+USA+GBR+TUR..PT_LF_SUB._Z.Y._T.Y_GE15..M?startPeriod=2023-11&dimensionAtObservation=AllDimensions"
df<-read.csv(url2)
View(df)
url2 <- "https://sdmx.oecd.org/public/rest/data/OECD.SDD.TPS,DSD_LFS@DF_IALFS_UNE_M,1.0/BEL+AUS+AUT+CAN+DNK+EST+FIN+FRA+DEU+GRC+HUN+ISL+IRL+ITA+JPN+LTU+LVA+LUX+NLD+NZL+POL+NOR+PRT+SVK+SVN+ESP+SWE+CHE+USA+GBR+TUR..PT_LF_SUB._Z.Y._T.Y_GE15..M?startPeriod=2023-11&dimensionAtObservation=AllDimensions&format=csvfilewithlabels"
df<-read.csv(url2)
data <- get_dataset("DP_LIVE",
filter = list(LOCATION = "USA",
SUBJECT = "TOT",
MEASURE = "PC_CHG",
TIME = "2020-2023"))
library(OECD)
xx <- get_data_structure("OECD.SDD.NAD.SEEA/DSD_NAT_RES@DF_NAT_RES/1.0")
View(xx)
xx <- get_data_structure("OECD.SDD.TPS,DSD_LFS@DF_IALFS_UNE_M,1.0")
View(xx)
xx
summary(xx)
dataset <- "OECD.SDD.TPS,DSD_LFS@DF_IALFS_UNE_M,1.0"
get_data_structure(dataset)
data_str <- get_data_structure(dataset)
summary(data_str)
data_filters <- "BEL+AUS+AUT+CAN+DNK+FRA+DEU+GRC+HUN+IRL+ITA+JPN+NLD+NZL+NOR+PRT+SVN+ESP+SWE+CHE+USA+GBR+TUR..PT_LF_SUB._Z.Y._T.Y_GE15..M"
dataset_unemprate <- "OECD.SDD.TPS,DSD_LFS@DF_IALFS_UNE_M,1.0"
data_str <- get_data_structure(dataset_unemprate)
str(data_str, max.level = 1)
library(OECD)
# Load the rsdmx package
library(rsdmx)
# Define the API URL for unemployment rates
oecd_url <- "https://sdmx.oecd.org/public/rest/data/OECD.SDD.TPS,DSD_LFS@DF_IALFS_UNE_M,1.0/BEL+AUS+AUT+CAN+DNK+FRA+DEU+GRC+HUN+IRL+ITA+JPN+NLD+NZL+NOR+PRT+SVN+ESP+SWE+CHE+USA+GBR+TUR..PT_LF_SUB._Z.Y._T.Y_GE15..M?startPeriod=2023-11&dimensionAtObservation=AllDimensions"
# Step 1: Fetch the data
unemployment_data <- readSDMX(oecd_url)
# Step 2: Convert to a data frame
unemployment_df <- as.data.frame(unemployment_data)
# View the data
head(unemployment_df)
View(number_style)
View(header_style)
library(CBRT)
my_api_key <- readLines("D:/evds_api_key.txt",warn=FALSE)
Categories <- getAllCategoriesInfo(CBRTKey = my_api_key)
Groups <- getAllGroupsInfo(CBRTKey = my_api_key)
my_api_key <- readLines("D:/evds_api_key.txt",warn=FALSE)
Categories <- getAllCategoriesInfo(CBRTKey = my_api_key)
Groups <- getAllGroupsInfo(CBRTKey = my_api_key)
Series <- getAllSeriesInfo(CBRTKey = my_api_key)
View(Series)
View(Categories)
View(Groups)
head(Series)
searchCBRT("consumer price", field = "series")
searchCBRT("consumer price", field = c("groups","series")
searchCBRT("consumer price", field = c("groups","series"))
searchCBRT("consumer price", field = c("groups","series"))
searchCBRT("consumer price")
searchCBRT("consumer price","series")
xx <- searchCBRT("consumer price","series")
View(xx)
searchCBRT("consumer price", field = "series")
# Import a time series (e.g., CPI data) with specific parameters
cpi_data <- getDataSeries(
series = c("TP.FE.OKTG01"),       # Example series ID
CBRTKey = my_api_key,            # Your API key
freq = 5,                     # Monthly frequency
aggType = "avg",              # Average aggregation method
startDate = "01-01-2010",     # Start date
endDate = "31-12-2023",       # End date
na.rm = TRUE                  # Remove missing dates
)
# View the imported data
head(cpi_data)
View(cpi_data)
dolar <- getDataSeries("TP.DK.USD.A")
dolar <- getDataSeries("TP.DK.USD.A",CBRTKey = my_api_key)
View(dolar)
# Define the series IDs for USD, EUR, and GBP (Sales rate against TRY)
usd_series <- "TP.DK.USD.TL"
eur_series <- "TP.DK.EUR.TL"
gbp_series <- "TP.DK.GBP.TL"
# Define the frequency and aggregation method
freq <- 5  # Monthly frequency
aggType <- "avg"  # Aggregation method: average
# Define the date range for the data (e.g., from 01-01-2020 to 31-12-2023)
startDate <- "01-01-2020"
endDate <- "31-12-2024"
# Fetch the data for USD, EUR, and GBP exchange rates
usd_data <- getDataSeries(
series = c(usd_series,eur_series,gbp_series),
CBRTKey = my_api_key,
freq = freq,
aggType = aggType,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
# Define the series IDs for USD, EUR, and GBP (Sales rate against TRY)
usd_series <- "TP.DK.USD.TL"
eur_series <- "TP.DK.EUR.TL"
gbp_series <- "TP.DK.GBP.TL"
# Define the frequency and aggregation method
freq <- 5  # Monthly frequency
aggType <- "avg"  # Aggregation method: average
# Define the date range for the data (e.g., from 01-01-2020 to 31-12-2023)
startDate <- "01-01-2020"
endDate <- "30-12-2024"
# Fetch the data for USD, EUR, and GBP exchange rates
usd_data <- getDataSeries(
series = c(usd_series,eur_series,gbp_series),
CBRTKey = my_api_key,
freq = freq,
aggType = aggType,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
# Import a time series (e.g., CPI data) with specific parameters
cpi_data <- getDataSeries(
series = c("TP.FE.OKTG01"),       # Example series ID
CBRTKey = my_api_key,            # Your API key
freq = 5,                     # Monthly frequency
startDate = "01-01-2010",     # Start date
endDate = "31-12-2023",       # End date
na.rm = TRUE                  # Remove missing dates
)
# View the imported data
head(cpi_data)
# Define the series IDs for USD, EUR, and GBP (Sales rate against TRY)
usd_series <- "TP.DK.USD.S"
eur_series <- "TP.DK.EUR.S"
gbp_series <- "TP.DK.GBP.S"
# Define the frequency and aggregation method
freq <- 5  # Monthly frequency
aggType <- "avg"  # Aggregation method: average
# Define the date range for the data (e.g., from 01-01-2020 to 31-12-2023)
startDate <- "01-01-2020"
endDate <- "31-12-2024"
# Fetch the data for USD, EUR, and GBP exchange rates
usd_data <- getDataSeries(
series = c(usd_series,eur_series,gbp_series),
CBRTKey = my_api_key,
freq = freq,
aggType = aggType,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
c(usd_series,eur_series,gbp_series)
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
series = c(usd_series,eur_series,gbp_series),
CBRTKey = my_api_key,
freq = freq,
aggType = aggType,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
#series = c(usd_series,eur_series,gbp_series),
series = c(usd_series),
CBRTKey = my_api_key,
freq = freq,
aggType = aggType,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
View(exchange_data)
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
#series = c(usd_series,eur_series,gbp_series),
series = c(usd_series,eur_series),
CBRTKey = my_api_key,
freq = freq,
aggType = aggType,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
#series = c(usd_series,eur_series,gbp_series),
series = c(eur_series),
CBRTKey = my_api_key,
freq = freq,
aggType = aggType,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
View(exchange_data)
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
#series = c(usd_series,eur_series,gbp_series),
series = c(usd_series),
CBRTKey = my_api_key,
freq = freq,
aggType = aggType,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
#series = c(usd_series,eur_series,gbp_series),
series = c(gbp_series),
CBRTKey = my_api_key,
freq = freq,
aggType = aggType,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
View(exchange_data)
c(usd_series,eur_series,gbp_series)
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
#series = c(usd_series,eur_series,gbp_series),
series = c("TP.DK.USD.S","TP.DK.EUR.S","TP.DK.GBP.S"),
CBRTKey = my_api_key,
freq = freq,
aggType = aggType,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
View(exchange_data)
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
#series = c(usd_series,eur_series,gbp_series),
series = c("TP.DK.USD.S","TP.DK.EUR.S","TP.DK.GBP.S"),
CBRTKey = my_api_key,
freq = freq,
aggType = aggType,
startDate = startDate,
#endDate = endDate,
na.rm = TRUE
)
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
#series = c(usd_series,eur_series,gbp_series),
series = c("TP.DK.USD.S","TP.DK.EUR.S","TP.DK.GBP.S"),
CBRTKey = my_api_key,
#freq = freq,
aggType = aggType,
startDate = startDate,
#endDate = endDate,
na.rm = TRUE
)
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
#series = c(usd_series,eur_series,gbp_series),
series = c("TP.DK.USD.S","TP.DK.EUR.S","TP.DK.GBP.S"),
CBRTKey = my_api_key,
#freq = freq,
#aggType = aggType,
startDate = startDate,
#endDate = endDate,
na.rm = TRUE
)
View(cpi_data)
View(exchange_data)
aggType
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
#series = c(usd_series,eur_series,gbp_series),
series = c("TP.DK.USD.S","TP.DK.EUR.S","TP.DK.GBP.S"),
CBRTKey = my_api_key,
#freq = freq,
#aggType = aggType,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
#series = c(usd_series,eur_series,gbp_series),
series = c("TP.DK.USD.S","TP.DK.EUR.S","TP.DK.GBP.S"),
CBRTKey = my_api_key,
freq = freq,
#aggType = aggType,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
View(exchange_data)
# Fetch the data for USD, EUR, and GBP exchange rates
exchange_data <- getDataSeries(
series = c(usd_series,eur_series,gbp_series),
CBRTKey = my_api_key,
freq = freq,
startDate = startDate,
endDate = endDate,
na.rm = TRUE
)
View(exchange_data)
rm(xx)
rm(dolar)
View(Series)
saveRDS(Series,"D:/series.rds")
Series2 <- readRDS("D:/series.rds")
