numeric_vector[3]  # Access the third element of numeric_vector
# Get the length of a vector
vector_length <- length(numeric_vector)
vector_length
# Vectorized addition
a <- c(1, 2, 3)
b <- c(4, 5, 6)
result <- a + b  # Element-wise addition
c(..., recursive = FALSE)
# Creating a numeric vector
numeric_vector <- c(1, 2, 3, 4, 5)
print(numeric_vector)
# Creating a character vector
character_vector <- c("apple", "banana", "cherry")
print(character_vector)
# Combining numeric and character values
mixed_vector <- c(1, "two", 3, "four")
print(mixed_vector)
print(class(mixed_vector))
class(mixed_vector)
# Creating nested vectors and combining them recursively
# The nested vectors are flattened into a single vector.
nested_vector <- c(1, c(2, 3), c(4, 5, c(6, 7)))
print(nested_vector)
# Create a sequence of 5 values from 2 to 10
seq(2, 10, length.out = 5)
# Create a sequence of integers from 10 to 1 in reverse order
seq(10, 1)
# Create a sequence of character strings
seq("A", "F")
# Repeat each element of the vector with different frequencies
rep(c("A", "B", "C"), times = c(3, 2, 4))
# Repeat the values from 1 to 3 to create a vector of length 10
rep(1:3, length.out = 10)
# Create a matrix
my_matrix <- matrix(1:4, nrow = 2)
# Repeat the entire matrix 3 times
rep(my_matrix, times = 3)
# Repeat the entire matrix 3 times
rep(my_matrix, times = 3)
# Create a matrix
my_matrix <- matrix(1:4, nrow = 2)
my_matrix
# Repeat the entire matrix 3 times
rep(my_matrix, times = 3)
# Create a vector with duplicate values
my_vector <- c(1, 2, 2, 3, 4, 4, 5)
# Use the unique() function to extract unique elements
unique(my_vector)
# Create a vector with duplicate values
my_vector <- c(1, 2, 2, 3, 4, 4, 5)
# Use the duplicated() function to identify duplicate elements
duplicates <- duplicated(my_vector)
# Print the result
print(duplicates)
# Get the values that are duplicated
duplicated_values <- my_vector[duplicates]
print(duplicated_values)
# Create a vector with duplicate values
my_vector <- c(1, 2, 2, 3, 4, 4, 5)
# Use the duplicated() function to identify duplicates from the last occurrence
duplicates_last <- duplicated(my_vector, fromLast = TRUE)
# Print the result
print(duplicates_last)
# Get the values that are duplicated from the last occurrence
duplicated_values_last <- my_vector[duplicates_last]
print(duplicated_values_last)
# Create a vector with duplicate values
my_vector <- c(1, 2, 2, 3, 4, 4, 5)
# Use the `!` operator to negate the duplicated values and get unique values
unique_values <- my_vector[!duplicated(my_vector)]
# Print the unique values
print(unique_values)
# Create a character vector with duplicate strings
my_strings <- c("apple", "banana", "apple", "cherry", "banana")
# Use the duplicated() function to identify duplicate strings
duplicates_strings <- duplicated(my_strings)
# Print the result
print(duplicates_strings)
# Get the duplicated strings
duplicated_strings <- my_strings[duplicates_strings]
print(duplicated_strings)
# Create a numeric vector
numeric_vector <- c(5, 2, 8, 1, 3)
# Sort the vector in ascending order
sorted_vector <- sort(numeric_vector)
# Print the result
print(sorted_vector)
# Create a character vector
character_vector <- c("apple", "banana", "cherry", "date", "grape")
# Sort the vector in alphabetical order
sorted_vector <- sort(character_vector)
# Print the result
print(sorted_vector)
# Create a numeric vector
numeric_vector <- c(5, 2, 8, 1, 3)
# Sort the vector in descending order
sorted_vector <- sort(numeric_vector, decreasing = TRUE)
# Print the result
print(sorted_vector)
# Create a factor vector
factor_vector <- factor(c("high", "low", "medium", "low", "high"))
# Sort the factor vector in alphabetical order
sorted_vector <- sort(factor_vector)
# Print the result
print(sorted_vector)
# Create a numeric vector
numeric_vector <- c(5, 2, 8, 1, 3)
# Sort the vector in ascending order and store the index order
sorted_indices <- order(numeric_vector)
sorted_vector <- numeric_vector[sorted_indices]
# Print the result
print(sorted_vector)
sorted_indices
# Print the result
print(sorted_vector)
# Create a numeric vector
my_vector <- c(10, 5, 15, 3, 8)
# Find indices where values are greater than 8
indices_greater_than_8 <- which(my_vector > 8)
# Print the result
print(indices_greater_than_8)
# Create a vector with missing values (NA)
my_vector <- c(2, NA, 5, NA, 8)
# Find indices of missing values
indices_of_na <- which(is.na(my_vector))
# Print the result
print(indices_of_na)
# Create a matrix
my_matrix <- matrix(1:9, nrow = 3)
# Find indices where values are greater than 5
indices_greater_than_5 <- which(my_matrix > 5, arr.ind = TRUE)
# Print the result
print(indices_greater_than_5)
# Create a character vector
my_vector <- c("apple", "banana", "cherry", "banana", "apple")
# Find indices where values are "banana"
indices_banana <- which(my_vector == "banana")
# Print the result
print(indices_banana)
# Create a numeric vector
my_vector <- c(10, 20, 30, 40, 50)
# Subset the second and fourth elements
subset <- my_vector[c(2, 4)]
# Print the result
print(subset)
# Create a numeric vector
my_vector <- c(10, 20, 30, 40, 50)
# Subset values greater than 30
subset <- my_vector[my_vector > 30]
# Print the result
print(subset)
# Create a character vector
fruits <- c("apple", "banana", "cherry")
# Access the second element
fruit <- fruits[2]
# Print the result
print(fruit)
# Create a numeric vector
numbers <- c(1, 2, 3, 4, 5)
# Access the first and fourth elements
subset <- numbers[c(1, 4)]
# Print the result
print(subset)
# Create a numeric vector
numbers <- c(1, 2, 3, 4, 5)
# Access elements greater than 3
subset <- numbers[numbers > 3]
# Print the result
print(subset)
# Create a numeric vector
numbers <- c(1, 2, 3, 4, 5)
# Exclude the second element
subset <- numbers[-2]
# Print the result
print(subset)
# Create two character vectors
first_names <- c("John", "Alice", "Bob")
last_names <- c("Doe", "Smith", "Johnson")
# Use paste() to concatenate them with the default separator (space)
full_names <- paste(first_names, last_names)
# Print the result
print(full_names)
# Create a character vector
fruits <- c("apple", "banana", "cherry", "date")
# Use paste() with a custom separator (comma and space)
fruits_list <- paste(fruits, collapse = ", ")
# Print the result
print(fruits_list)
# Create a numeric vector and a character vector
prices <- c(10, 5, 3, 8)
fruits <- c("apple", "banana", "cherry", "date")
# Use paste() to combine them
item_description <- paste(prices, "USD -", fruits)
# Print the result
print(item_description)
# Create a numeric vector and a character vector
prices <- c(10, 5, 3)
fruits <- c("apple", "banana", "cherry")
# Use paste() to combine them
item_description <- paste(prices, "USD -", fruits)
# Print the result
print(item_description)
# Create a character vector
sentence <- c("This", "is", "an", "example", "sentence")
# Use paste() to collapse the vector into a single string
collapsed_sentence <- paste(sentence, collapse = " ")
# Print the result
print(collapsed_sentence)
# Create a matrix including only 1's that are 2 by 3
matrix(1, nrow = 2, ncol = 3)
B <- matrix(c(1, 2, 3, 3, 6, 8, 7, 8, 4), nrow = 3, byrow = TRUE)
A <- matrix(c(1, 2, 3, 3, 6, 8, 7, 8, 4), nrow = 3, byrow = TRUE)
A
matrix(c(1, 2, 3, 3, 6, 8, 7, 8, 4), nrow = 3)
matrix(c(1, 2, 3, 3, 6, 8, 7, 8, 4), nrow = 3)
v1 <- c(3,4,6,8,5)
v2 <- c(4,8,4,7,1)
v3 <- c(2,2,5,4,6)
v4 <- c(4,7,5,2,5)
m1 <- cbind(v1, v2, v3, v4)
m1
m2 <- rbind(v1, v2, v3, v4)
m2
m1
# Accessing and modifying elements in a matrix
element <- m1[2, 3]  # Accessing the element in the second row and third column
print(element)
# Modifying the element
m1[2, 3] <- 10  # Modifying the element at the specified position
m1
# Accessing and modifying elements in a matrix
element <- m1[2, 3]  # Accessing the element in the second row and third column
print(element)
# Modifying the element
m1[2, 3] <- 10  # Modifying the element at the specified position
print(m1)
m1
print(m1)
# Accessing and modifying elements in a matrix
element <- m1[2, 3]  # Accessing the element in the second row and third column
print(element)
# Accessing and modifying elements in a matrix
m1[2, 3]  # Accessing the element in the second row and third column
print(m1)
colnames(m1) <- LETTERS[1:4] # Naming columns with the first 4 letters
m1
rownames(m1) <- tail(LETTERS,5) # Naming rows with the last 5 letters
m2
tail(LETTERS,5)
m1
A <- matrix(c(1:6),nrow = 2)
sum(A)
sqrt(A)
A <- matrix(c(1:6) * 0.15,nrow = 2)
A
sqrt(A) # gets square root of every element in A
A
round(A, 1)
A <- matrix(1:4,nrow=2)
B <- matrix(5:8,nrow=2)
A + B  # elementwise addition
A - B  # elementwise addition
A * B  # elementwise addition
A <- matrix(1:4,nrow=2)
B <- matrix(5:8,nrow=2)
print(A)
print(B)
A^2
mean(A)
median(A)
min(A)
rowSums(A) # sum of rows
rowMeans(A) # mean of rows
colSums(A) # sum of columns
colMeans(A) # mean of columns
# Applying functions to matrices
row_sums <- apply(A, 1, sum)  # Applying sum function to each row (margin = 1)
print(row_sums)
A
t(A) # transpose of A
m1 <- matrix(c(1, 3, 5 ,3, 4, 9), nrow = 2) # create 2 by 3 matrix
m2 <- matrix(c(6, 2, 4 ,7, 8, 4), nrow = 3) # create 3 by 2 matrix
m1 %*% m2
print(m1)
print(m2)
# Create a square matrix
matrix_A <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
# Compute the inverse of the matrix
inverse_matrix_A <- solve(matrix_A)
print(inverse_matrix_A)
# Create a square matrix
matrix_A <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
# Compute the determinant of the matrix
determinant_A <- det(matrix_A)
print(determinant_A)
# Check the determinant and invertibility of a matrix
det_A <- det(matrix_A)
if (det_A != 0) {
print("Matrix is invertible.")
} else {
print("Matrix is singular, not invertible.")
}
# Check the determinant before inverting the matrix
det_A <- det(A)
if (det_A != 0) {
inverse_matrix_A <- solve(A)
print(inverse_matrix_A)
} else {
print("Matrix is singular, inverse does not exist.")
}
# Create a sample matrix
A <- matrix(c(4, 2, 1, -1), nrow = 2, byrow = TRUE)
# Compute eigenvalues and eigenvectors
eig <- eigen(A)
# Access eigenvalues
eigenvalues <- eig$values
print("Eigenvalues:")
print(eigenvalues)
# Access eigenvectors
eigenvectors <- eig$vectors
print(eigenvectors)
# Creating a list with different data types
my_list <- list("Fatih Tüzen", 25, c("red", "blue", "green"), matrix(1:4, nrow = 2))
# Accessing elements in a list
# Using double brackets
print(my_list[[1]])  # Accesses the first element
print(my_list[[3]])  # Accesses the third element
# Using $ operator for named elements
print(my_list$name)  # Accesses an element named "name"
# Creating a list with different data types
my_list <- list(name = "Fatih Tüzen", age = 40, colors = c("red", "blue", "green"), matrix_data = matrix(1:4, nrow = 2))
# Accessing elements in a list
# Using double brackets
print(my_list[[1]])  # Accesses the first element
# Using $ operator for named elements
print(my_list$colors)  # Accesses an element named "name"
print(my_list[["matrix_data"]])
# Adding elements to a list
my_list[[5]] <- "New Element"
my_list
my_list <- append(my_list, list(another_element))
my_list <- append(my_list, list(numbers = 0:9))
my_list
# Removing elements from a list
my_list[[3]] <- NULL  # Removes the third element
my_list
my_list <- my_list[-c(2, 4)]  # Removes elements at positions 2 and 4
my_list
# Creating a list to store diverse data about individuals
individual_1 <- list(
name = "Alice",
age = 28,
gender = "Female",
contact = list(
email = "alice@example.com",
phone = "123-456-7890"
),
interests = c("Hiking", "Reading", "Coding")
)
individual_2 <- list(
name = "Bob",
age = 35,
gender = "Male",
contact = list(
email = "bob@example.com",
phone = "987-654-3210"
),
interests = c("Cooking", "Traveling", "Photography")
)
# List of individuals
individuals_list <- list(individual_1, individual_2)
# Simulating experimental data and storing in a list
experiment_1 <- list(
parameters = list(
temperature = 25,
duration = 60,
method = "A"
),
results = matrix(rnorm(12), nrow = 3)  # Simulated experimental results
)
experiment_2 <- list(
parameters = list(
temperature = 30,
duration = 45,
method = "B"
),
results = data.frame(
measurements = c(10, 15, 20),
labels = c("A", "B", "C")
)
)
# List containing experimental data
experiment_list <- list(experiment_1, experiment_2)
# Survey responses stored in a list
respondent_1 <- list(
name = "Carol",
age = 22,
answers = list(
question_1 = "Yes",
question_2 = c("Option B", "Option D"),
question_3 = data.frame(
response = c(4, 3, 5),
category = c("A", "B", "C")
)
)
)
respondent_2 <- list(
name = "David",
age = 30,
answers = list(
question_1 = "No",
question_2 = "Option A",
question_3 = matrix(1:6, nrow = 2)
)
)
# List of survey respondents
respondents_list <- list(respondent_1, respondent_2)
respondents_list
respondent_2
respondent_1
View(respondent_1)
# Custom function to compute statistics
compute_statistics <- function(data) {
stats_list <- list(
mean = mean(data),
median = median(data),
sd = sd(data),
summary = summary(data)
)
return(stats_list)
}
# Usage of the function and storing outputs in a list
data <- c(23, 45, 67, 89, 12)
statistics <- compute_statistics(data)
statistics
# Function to fit a model and store outputs
fit_model <- function(train_data, test_data) {
model <- lm(train_data$y ~ train_data$x)  # Linear regression model
# Compute predictions
predictions <- predict(model, newdata = test_data)
# Store outputs in a list
model_outputs <- list(
fitted_model = model,
predictions = predictions,
coefficients = coef(model)
)
return(model_outputs)
}
# Usage of the function and storing outputs in a list
train_data <- data.frame(x = 1:10, y = 2*(1:10) + rnorm(10))
test_data <- data.frame(x = 11:15)
model_results <- fit_model(train_data, test_data)
# Function to fit a model and store outputs
fit_model <- function(train_data, test_data) {
model <- lm(train_data$y ~ train_data$x)  # Linear regression model
# Compute predictions
predictions <- predict(model, newdata = test_data)
# Store outputs in a list
model_outputs <- list(
fitted_model = model,
predictions = predictions,
coefficients = coef(model)
)
return(model_outputs)
}
# Usage of the function and storing outputs in a list
train_data <- data.frame(x = 1:10, y = 2*(1:10) + rnorm(10))
test_data <- data.frame(x = 11:15)
model_results <- fit_model(train_data, test_data)
model_results
model_results <- fit_model(train_data, test_data)
model_results
model_results$predictions
test_data
model <- lm(train_data$y ~ train_data$x)  # Linear regression model
model
model$fitted.values
predict(model, newdata = test_data)
# Function to fit a model and store outputs
fit_model <- function(train_data, test_data) {
model <- lm(y ~ x, data = train_data)  # Linear regression model
# Compute predictions
predictions <- predict(model, newdata = test_data)
# Store outputs in a list
model_outputs <- list(
fitted_model = model,
predictions = predictions,
coefficients = coef(model)
)
return(model_outputs)
}
# Usage of the function and storing outputs in a list
train_data <- data.frame(x = 1:10, y = 2*(1:10) + rnorm(10))
test_data <- data.frame(x = 11:15)
model_results <- fit_model(train_data, test_data)
model_results
# Function to perform a simulation and store outputs
run_simulation <- function(num_simulations) {
simulation_results <- list()
for (i in 1:num_simulations) {
# Perform simulation
simulated_data <- rnorm(100)
# Store simulation outputs in the list
simulation_results[[paste0("simulation_", i)]] <- simulated_data
}
return(simulation_results)
}
# Usage of the function and storing outputs in a list
simulations <- run_simulation(5)
simulations
head(simulations)
