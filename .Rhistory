m1
rownames(m1) <- tail(LETTERS,5) # Naming rows with the last 5 letters
m2
tail(LETTERS,5)
m1
A <- matrix(c(1:6),nrow = 2)
sum(A)
sqrt(A)
A <- matrix(c(1:6) * 0.15,nrow = 2)
A
sqrt(A) # gets square root of every element in A
A
round(A, 1)
A <- matrix(1:4,nrow=2)
B <- matrix(5:8,nrow=2)
A + B  # elementwise addition
A - B  # elementwise addition
A * B  # elementwise addition
A <- matrix(1:4,nrow=2)
B <- matrix(5:8,nrow=2)
print(A)
print(B)
A^2
mean(A)
median(A)
min(A)
rowSums(A) # sum of rows
rowMeans(A) # mean of rows
colSums(A) # sum of columns
colMeans(A) # mean of columns
# Applying functions to matrices
row_sums <- apply(A, 1, sum)  # Applying sum function to each row (margin = 1)
print(row_sums)
A
t(A) # transpose of A
m1 <- matrix(c(1, 3, 5 ,3, 4, 9), nrow = 2) # create 2 by 3 matrix
m2 <- matrix(c(6, 2, 4 ,7, 8, 4), nrow = 3) # create 3 by 2 matrix
m1 %*% m2
print(m1)
print(m2)
# Create a square matrix
matrix_A <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
# Compute the inverse of the matrix
inverse_matrix_A <- solve(matrix_A)
print(inverse_matrix_A)
# Create a square matrix
matrix_A <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
# Compute the determinant of the matrix
determinant_A <- det(matrix_A)
print(determinant_A)
# Check the determinant and invertibility of a matrix
det_A <- det(matrix_A)
if (det_A != 0) {
print("Matrix is invertible.")
} else {
print("Matrix is singular, not invertible.")
}
# Check the determinant before inverting the matrix
det_A <- det(A)
if (det_A != 0) {
inverse_matrix_A <- solve(A)
print(inverse_matrix_A)
} else {
print("Matrix is singular, inverse does not exist.")
}
# Create a sample matrix
A <- matrix(c(4, 2, 1, -1), nrow = 2, byrow = TRUE)
# Compute eigenvalues and eigenvectors
eig <- eigen(A)
# Access eigenvalues
eigenvalues <- eig$values
print("Eigenvalues:")
print(eigenvalues)
# Access eigenvectors
eigenvectors <- eig$vectors
print(eigenvectors)
# Creating a list with different data types
my_list <- list("Fatih Tüzen", 25, c("red", "blue", "green"), matrix(1:4, nrow = 2))
# Accessing elements in a list
# Using double brackets
print(my_list[[1]])  # Accesses the first element
print(my_list[[3]])  # Accesses the third element
# Using $ operator for named elements
print(my_list$name)  # Accesses an element named "name"
# Creating a list with different data types
my_list <- list(name = "Fatih Tüzen", age = 40, colors = c("red", "blue", "green"), matrix_data = matrix(1:4, nrow = 2))
# Accessing elements in a list
# Using double brackets
print(my_list[[1]])  # Accesses the first element
# Using $ operator for named elements
print(my_list$colors)  # Accesses an element named "name"
print(my_list[["matrix_data"]])
# Adding elements to a list
my_list[[5]] <- "New Element"
my_list
my_list <- append(my_list, list(another_element))
my_list <- append(my_list, list(numbers = 0:9))
my_list
# Removing elements from a list
my_list[[3]] <- NULL  # Removes the third element
my_list
my_list <- my_list[-c(2, 4)]  # Removes elements at positions 2 and 4
my_list
# Creating a list to store diverse data about individuals
individual_1 <- list(
name = "Alice",
age = 28,
gender = "Female",
contact = list(
email = "alice@example.com",
phone = "123-456-7890"
),
interests = c("Hiking", "Reading", "Coding")
)
individual_2 <- list(
name = "Bob",
age = 35,
gender = "Male",
contact = list(
email = "bob@example.com",
phone = "987-654-3210"
),
interests = c("Cooking", "Traveling", "Photography")
)
# List of individuals
individuals_list <- list(individual_1, individual_2)
# Simulating experimental data and storing in a list
experiment_1 <- list(
parameters = list(
temperature = 25,
duration = 60,
method = "A"
),
results = matrix(rnorm(12), nrow = 3)  # Simulated experimental results
)
experiment_2 <- list(
parameters = list(
temperature = 30,
duration = 45,
method = "B"
),
results = data.frame(
measurements = c(10, 15, 20),
labels = c("A", "B", "C")
)
)
# List containing experimental data
experiment_list <- list(experiment_1, experiment_2)
# Survey responses stored in a list
respondent_1 <- list(
name = "Carol",
age = 22,
answers = list(
question_1 = "Yes",
question_2 = c("Option B", "Option D"),
question_3 = data.frame(
response = c(4, 3, 5),
category = c("A", "B", "C")
)
)
)
respondent_2 <- list(
name = "David",
age = 30,
answers = list(
question_1 = "No",
question_2 = "Option A",
question_3 = matrix(1:6, nrow = 2)
)
)
# List of survey respondents
respondents_list <- list(respondent_1, respondent_2)
respondents_list
respondent_2
respondent_1
View(respondent_1)
# Custom function to compute statistics
compute_statistics <- function(data) {
stats_list <- list(
mean = mean(data),
median = median(data),
sd = sd(data),
summary = summary(data)
)
return(stats_list)
}
# Usage of the function and storing outputs in a list
data <- c(23, 45, 67, 89, 12)
statistics <- compute_statistics(data)
statistics
# Function to fit a model and store outputs
fit_model <- function(train_data, test_data) {
model <- lm(train_data$y ~ train_data$x)  # Linear regression model
# Compute predictions
predictions <- predict(model, newdata = test_data)
# Store outputs in a list
model_outputs <- list(
fitted_model = model,
predictions = predictions,
coefficients = coef(model)
)
return(model_outputs)
}
# Usage of the function and storing outputs in a list
train_data <- data.frame(x = 1:10, y = 2*(1:10) + rnorm(10))
test_data <- data.frame(x = 11:15)
model_results <- fit_model(train_data, test_data)
# Function to fit a model and store outputs
fit_model <- function(train_data, test_data) {
model <- lm(train_data$y ~ train_data$x)  # Linear regression model
# Compute predictions
predictions <- predict(model, newdata = test_data)
# Store outputs in a list
model_outputs <- list(
fitted_model = model,
predictions = predictions,
coefficients = coef(model)
)
return(model_outputs)
}
# Usage of the function and storing outputs in a list
train_data <- data.frame(x = 1:10, y = 2*(1:10) + rnorm(10))
test_data <- data.frame(x = 11:15)
model_results <- fit_model(train_data, test_data)
model_results
model_results <- fit_model(train_data, test_data)
model_results
model_results$predictions
test_data
model <- lm(train_data$y ~ train_data$x)  # Linear regression model
model
model$fitted.values
predict(model, newdata = test_data)
# Function to fit a model and store outputs
fit_model <- function(train_data, test_data) {
model <- lm(y ~ x, data = train_data)  # Linear regression model
# Compute predictions
predictions <- predict(model, newdata = test_data)
# Store outputs in a list
model_outputs <- list(
fitted_model = model,
predictions = predictions,
coefficients = coef(model)
)
return(model_outputs)
}
# Usage of the function and storing outputs in a list
train_data <- data.frame(x = 1:10, y = 2*(1:10) + rnorm(10))
test_data <- data.frame(x = 11:15)
model_results <- fit_model(train_data, test_data)
model_results
# Function to perform a simulation and store outputs
run_simulation <- function(num_simulations) {
simulation_results <- list()
for (i in 1:num_simulations) {
# Perform simulation
simulated_data <- rnorm(100)
# Store simulation outputs in the list
simulation_results[[paste0("simulation_", i)]] <- simulated_data
}
return(simulation_results)
}
# Usage of the function and storing outputs in a list
simulations <- run_simulation(5)
simulations
head(simulations)
# Creating a data frame manually
names <- c("Alice", "Bob", "Charlie", "David")
ages <- c(25, 30, 28, 35)
scores <- c(88, 92, 75, 80)
# Creating a data frame using the data
df <- data.frame(Name = names, Age = ages, Score = scores)
print(df)
# Sample data frame creation
student_id <- 1:5
student_names <- c("Alice", "Bob", "Charlie", "David", "Eva")
ages <- c(20, 22, 21, 23, 20)
scores <- c(85, 90, 78, 92, 88)
students <- data.frame(ID = student_id, Name = student_names, Age = ages, Score = scores)
# Accessing the 'Name' column using $
students$Name
# Accessing the 'Age' column using double brackets [[ ]]
students[["Age"]]
students["Age"]
students["Age"]
students[["Age"]]
# Accessing a single element in row 3, column 2
students[3, 2]
# Accessing a single element by row and column names
students["3", "Name"]
# Selecting rows where Age is greater than 25 and Score is above 80
students[students$Age > 25 & students$Score > 80, ]
students
students
# Selecting rows where Age is greater than 25 and Score is above 80
students[students$Age > 20 & students$Score > 80, ]
# Creating a tibble from a data frame
library(tibble)
# Creating a tibble
my_tibble <- tibble(
column1 = c(1, 2, 3),
column2 = c("A", "B", "C")
)
my_tibble
# Creating a data frame with sequences and vectors
names <- c("Alice", "Bob", "Charlie", "David")
ages <- seq(from = 25, to = 35, by = 5)
scores <- sample(70:100, 4, replace = TRUE)
# Creating a data frame using the data generated
df <- data.frame(Name = names, Age = ages, Score = scores)
names
ages
ages <- seq(from = 20, to = 35, by = 5)
ages
scores
# Creating a data frame with sequences and vectors
names <- c("Alice", "Bob", "Charlie", "David")
ages <- seq(from = 20, to = 35, by = 5)
scores <- sample(70:100, 4, replace = TRUE)
# Creating a data frame using the data generated
df <- data.frame(Name = names, Age = ages, Score = scores)
print(df)
rm(list=ls())
# Creating a factor for educational levels
education_levels <- c("High School", "Graduate", "Undergraduate", "High School", "Undergraduate")
education_factor <- factor(education_levels)
# Checking unique values within the factor
unique(education_factor)
# Sample data as a vector
gender <- c("Male", "Female", "Male", "Male", "Female")
# Converting to factor
gender_factor <- factor(gender)
# Checking levels
levels(gender_factor)
# Sample data as a vector
gender <- c("Male", "Female", "Male", "Male", "Female")
# Converting to factor
gender_factor <- factor(gender)
# Checking levels
levels(gender_factor)
# Checking unique values within the factor
unique(gender_factor)
# Simulated data for a model
education <- c("High School", "Graduate", "Undergraduate", "High School", "Undergraduate")
income <- c("Low", "High", "Medium", "Low", "High")
response <- c(20, 35, 28, 18, 40)
# Converting categorical variables to factors for modeling
education_factor <- factor(education)
income_factor <- factor(income)
# Linear model
model <- lm(response ~ education_factor + income_factor)
summary(model)
categories <- sample(c("Electronics", "Clothing", "Food"),
size = 20 ,
replace = TRUE)
categories
category_factor <- factor(categories)
# Creating a bar plot with factors
ggplot() +
geom_bar(aes(x = category_factor, fill = category_factor)) +
labs(title = "Distribution of Product Categories", x = "Category", y = "Count")
# Creating a bar plot with factors
ggplot2::ggplot() +
geom_bar(aes(x = category_factor, fill = category_factor)) +
labs(title = "Distribution of Product Categories", x = "Category", y = "Count")
# Creating a bar plot with factors
ggplot2::ggplot(aes(x = category_factor, fill = category_factor)) +
geom_bar() +
labs(title = "Distribution of Product Categories", x = "Category", y = "Count")
category_factor
# Creating a bar plot with factors using ggplot2
library(ggplot2)
# Creating a data frame for ggplot
data <- data.frame(category = category_factor)
# Creating a bar plot
ggplot(data, aes(x = category, fill = category)) +
geom_bar() +
labs(title = "Distribution of Product Categories", x = "Category", y = "Count")
# Simulated data for spending behavior
spending <- c(200, 350, 280, 180, 400)
income_levels <- c("Low", "High", "Medium", "Low", "High")
education_levels <- c("High School", "Graduate", "Undergraduate", "Graduate", "Undergraduate")
# Creating factor variables for income and education
income_factor <- factor(income_levels)
education_factor <- factor(education_levels)
# Linear model with both income and education as factor variables
model <- lm(spending ~ income_factor + education_factor)
summary(model)
model
View(model)
# Simulated data for spending behavior
spending <- c(200, 350, 280, 180, 400)
income_levels <- c("Low", "High", "Medium", "Low", "High")
education_levels <- c("High School", "Graduate", "Undergraduate", "Graduate", "Undergraduate")
# Creating factor variables for income and education
income_factor <- factor(income_levels)
education_factor <- factor(education_levels)
# Linear model with both income and education as factor variables
model <- lm(spending ~ income_factor + education_factor)
summary(model)
spending <- runif(n, min = 100, max = 600)
# Simulated data for spending behavior
n <- 100
spending <- runif(n, min = 100, max = 600)
spending
income_levels <- sample(c("Low", "High", "Medium"), size = n, replace = TRUE)
education_levels <- sample(c("High School", "Graduate", "Undergraduate"),
size = n,
replace = TRUE)
# Creating factor variables for income and education
income_factor <- factor(income_levels)
education_factor <- factor(education_levels)
# Linear model with both income and education as factor variables
model <- lm(spending ~ income_factor + education_factor)
summary(model)
rm(list=ls())
library(microbenchmark)
num_list <- list(a = 1:1000, b = 1001:2000, c = 2001:3000)
benchmark_results <- microbenchmark(
apply_sum = apply(num_list, 2, sum),
sapply_sum = sapply(num_list, sum),
lapply_sum = lapply(num_list, sum),
map_sum = map_dbl(num_list, sum),
times = 100
)
View(num_list)
num_list <- list(a = 1:3, b = 4:6, c = 7:9)
custom_function <- function(x) sum(x) * 2
result_list <- lapply(num_list, custom_function)
print(result_list)
word_list <- list("apple", "banana", "orange", "grape")
vowel_list <- lapply(word_list, function(word) grep("[aeiou]", strsplit(word, "")[[1]], value = TRUE))
print(vowel_list)
library(purrr)
num_list <- list(a = 1:3, b = 4:6, c = 7:9)
mapped_results <- map(num_list, ~ .x^2)
print(mapped_results)
text_list <- list("hello", "world", "R", "programming")
string_lengths <- map(text_list, nchar)
print(string_lengths)
library(microbenchmark)
# 1000x1000 boyutunda bir matris oluşturalım
matris_data <- matrix(rnorm(1000000), nrow = 1000)
# Toplamı hesaplamak için apply() fonksiyonunu kullanalım
benchmark_results <- microbenchmark(
apply_sum = apply(matris_data, 2, sum),
sapply_sum = sapply(matris_data, sum),
lapply_sum = lapply(matris_data, sum),
map_sum = map_dbl(as.list(matris_data), sum),  # map fonksiyonu için listeye çevirmemiz gerekiyor
times = 100
)
print(benchmark_results)
View(matris_data)
# Create a 100 x 100 matrix
matrix_data <- matrix(rnorm(10000), nrow = 100)
# Use apply() function to compute the sum for each column
benchmark_results <- microbenchmark(
apply_sum = apply(matrix_data, 2, sum),
sapply_sum = sapply(matrix_data, sum),
lapply_sum = lapply(matrix_data, sum),
map_sum = map_dbl(as.list(matrix_data), sum),  # We need to convert the matrix to a list for the map function
times = 100
)
print(benchmark_results)
rm(list=ls())
library(microbenchmark)
library(tidyr)
sales_data <- data.frame(
product = c("A", "B", "C"),
Jan = c(500, 600, 300),
Feb = c(450, 700, 320),
Mar = c(520, 640, 310)
)
sales_long <- pivot_longer(sales_data, cols = Jan:Mar,
names_to = "month", values_to = "sales")
sales_long
sales_wide <- pivot_wider(sales_long, names_from = month, values_from = sales)
sales_wide
sales_long <- pivot_longer(sales_data, cols = Jan:Feb,
names_to = "month", values_to = "sales",
values_drop_na = TRUE)
sales_long
sales_data <- data.frame(
product = c("A", "A", "B", "B", "C", "C"),
region = c("North", "South", "North", "South", "North", "South"),
Jan = c(500, NA, 600, 580, 300, 350),
Feb = c(450, 490, NA, 700, 320, 400)
)
sales_data
sales_long <- pivot_longer(sales_data, cols = Jan:Feb,
names_to = "month", values_to = "sales",
values_drop_na = TRUE)
sales_long
# Gerekli paketleri yükle
library(tidyr)
library(ggplot2)
# Veri setini oluştur
sales_data <- data.frame(
product = c("A", "B", "C"),
Jan = c(500, 600, 300),
Feb = c(450, 700, 320),
Mar = c(520, 640, 310)
)
# Veriyi uzun formata dönüştür
sales_long <- pivot_longer(sales_data, cols = Jan:Mar,
names_to = "month", values_to = "sales")
# Çubuk grafiği oluştur
ggplot(sales_long, aes(x = month, y = sales, fill = product)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Sales Data: Long Format Example", x = "Month", y = "Sales") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
