getwd()
library(dplyr)
library(RJDemetra)
SUE <- ipi_c_eu[, "TR"]
SUE
head(SUE)
plot(SUE)
model_sa<-tramoseats(SUE, spec ="RSA3")
View(model_sa)
my_reg <- regarima_tramoseats(SUE,spec ="TR3")
View(my_reg)
model_sa$final$series
head(model_sa$final$series)
model_regarima <- regarima_tramoseats(SUE,spec ="TR3")
model_regarima$forecast
summary(model_sa)
model_sa
model_regarima
library(RJDemetra)
SUE <- ipi_c_eu[, "TR"]
plot(SUE)
plot(SUE,color="blue" )
plot(SUE,col="blue" )
base::plot(SUE)
base::plot(SUE,col="blue")
library(RJDemetra)
SUE <- ipi_c_eu[, "TR"]
base::plot(SUE,col="blue")
model_sa<-tramoseats(SUE, spec ="RSA3")
num_var <- 3.14
class(num_var)
typeof(num_var)
class(num_var)
class(double_var)
double_var <- 3.14
class(num_var)
class(double_var)
typeof(num_var)
typeof(double_var)
typeof(as.numeric(3.14))
# Using as.integer()
x <- as.integer(5)
typeof(x)
typeof(y)
# Direct assignment
y <- 10L  # The 'L' suffix denotes an integer
typeof(y)
double_number <- 3.99
integer_result <- as.integer(double_number)  # Rounds down to 3
integer_result
greeting <- "Hello, "
name <- "Fatih"
full_greeting <- paste(greeting, name)
full_greeting
# Extracting a substring
text <- "R Programming"
sub_text <- substr(text, start = 1, stop = 1)  # Extracts the first character
sub_text
a <- 1.234
typeof(a)
class(a)
class(as.character(a))
b <- "1.234"
class(b)
class(as.numeric(b)) # convert to character
is_raining <- TRUE
is_raining
temperature <- 25
is_hot <- temperature > 30  # Evaluates to FALSE
is_hot
is_even <- logical(1)  # Creates a logical vector with one TRUE value
is_even
is_even <- logical(2)  # Creates a logical vector with one TRUE value
is_even
all_positive <- all(c(TRUE, TRUE, TRUE))  # Checks if all values are TRUE
all_positive
class(is_raining)
typeof(is_raining)
c <- 4 > 3
isTRUE(c)
all_positive <- all(c(1, 2, -3))  # Checks if all values are TRUE
all_positive <- all(c(TRUE, TRUE, FALSE))  # Checks if all values are TRUE
all_positive
if (is_raining) {
cat("Don't forget your umbrella!\n")
} else {
cat("Enjoy the sunshine!\n")
}
has_license <- TRUE
is_old_enough <- TRUE
can_drive <- has_license & is_old_enough  # Evaluates to TRUE
can_drive
any(c(TRUE,FALSE))
!isTRUE(c)
6 < 5 & 6 > 7 # If FALSE in both cases, the result returns FALSE
3 < 5 & 8 > 7 # If TRUE in both cases, the result returns TRUE
3 < 5 & 6 > 7 # If one case is FALSE and the other case is TRUE, the result is FALSE.
6 < 5 & 6 > 7 # If FALSE in both cases, the result returns FALSE
(5==4) | (3!=4) # If either condition is TRUE,returns TRUE
# Get the current system time
current_time <- Sys.time()
current_time
# Creating a POSIXct object
timestamp <- as.POSIXct("2023-09-01 14:05:00", format = "%Y-%m-%d %H:%M:%S")
timestamp
class(timestamp)
duration <- timestamp2 - timestamp1
duration <- current_time - timestamp
duration
# Creating a POSIXct object
timestamp <- as.POSIXct("2023-09-26 14:01:00", format = "%Y-%m-%d %H:%M:%S")
duration <- current_time - timestamp
duration
# Add 3 days to a date
new_date <- my_date + days(3)
# Creating a Date object
my_date <- as.Date("2023-09-01")
# Add 3 days to a date
new_date <- my_date + days(3)
class(my_date)
# Add 3 days to a date
new_date <- my_date + 3
new_date
# Creating a Date object
my_date <- as.Date("2023-09-26")
# Add 3 days to a date
new_date <- my_date + 3
new_date
# Formatting a date as a character string
formatted_date <- format(my_date, format = "%Y-%m-%d")
formatted_date
parsed_date
# Parsing a character string into a date object
parsed_date <- as.Date("2023-09-26", format = "%Y-%m-%d")
parsed_date
# Formatting a date as a character string
formatted_date <- format(my_date, format = "%Y/%m/%d")
formatted_date
# Creating complex numbers
z1 <- complex(real = 3, imaginary = 2)
z1
class(z1)
z2
z2 <- 1 + 4i
z2
class(z2)
