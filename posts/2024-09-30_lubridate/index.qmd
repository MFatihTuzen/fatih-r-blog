---
title: "Mastering Date and Time Data in R with lubridate"
author: "M. Fatih Tüzen"
date: "2024-09-30"
categories: [R Programming, lubridate, time series, time manipulation, date handling]
lang: en
---

```{r}
#| include: false
Sys.setlocale("LC_TIME", "English")
```

[![Artwork by: Allison Horst](lubridate.png){fig-align="center"}](https://allisonhorst.com/r-packages-functions)

## What is lubridate?

**lubridate** is a powerful and widely-used package in the **tidyverse** ecosystem, specifically designed for making date-time manipulation in R both easier and more intuitive. It was created to address the common difficulties users face when working with dates and times, which are often stored in a variety of inconsistent formats or require complex arithmetic operations.

Developed and maintained by the **RStudio** team as part of the tidyverse collection of packages, **lubridate** introduces a simpler syntax for parsing, extracting, and manipulating date-time data, allowing for faster and more accurate operations.

Key benefits of using **lubridate** include:

-   **Simplified parsing** of dates and times from a wide variety of formats.

-   **Easy extraction** of components such as year, month, day, or hour from date-time objects.

-   **Seamless handling of time zones**, allowing conversion between different zones with ease.

-   **Efficient arithmetic operations** on dates, such as adding or subtracting days, months, or years.

-   **Support for durations and intervals**, crucial for working with time spans in real-world applications.

For further documentation, tutorials, and resources, you can explore the **lubridate** official website: <https://lubridate.tidyverse.org>.

## Introduction to Date and Time Formats

Date and time data are essential in many fields, from finance and biology to web analytics and logistics. However, handling such data can be difficult due to the variety of formats and time zones involved. In R, base functions like `as.Date()` or `strptime()` can handle date-time data, but their syntax can be cumbersome when dealing with multiple formats or time zones.

The **lubridate** package simplifies these tasks by offering intuitive functions that handle date-time data efficiently, helping us avoid many of the common pitfalls associated with date and time manipulation.

## Why Do We Need lubridate?

While R provides several built-in functions for date-time manipulation, they can quickly become limited or difficult to use in more complex scenarios. The **lubridate** package provides solutions by:

-   Offering intuitive functions to parse and format dates.

-   Supporting a variety of date-time formats in a single command.

-   Simplifying the extraction and modification of date-time components (like year, month, or hour).

-   Facilitating the handling of time zones, durations, and intervals.

## Date and Time Formats in R

In R, dates are typically stored in `Date` format (which does not include time information), while date-time data is stored in `POSIXct` or `POSIXlt` formats. These formats support timestamps and can handle time zones. For example:

```{r}
date_example <- as.Date("2024-09-30")
date_example
datetime_example <- as.POSIXct("2024-09-30 14:45:00", tz = "UTC")
datetime_example

```

These formats work well for simple tasks but quickly become difficult to manage in more complex scenarios. That’s where **lubridate** steps in.

## Common lubridate Functions and Their Arguments

### **Parsing Dates and Times**

One of the core strengths of **lubridate** is its ability to simplify the parsing of date and time data from various formats. Functions like `ymd()`, `mdy()`, `dmy()`, and their date-time counterparts (`ymd_hms()`, `mdy_hms()`, etc.) make it easy to convert strings into R's `Date` or `POSIXct` objects.

#### What do the letters `y`, `m`, `d` stand for?

The functions are named according to the order in which the date components appear in the input string:

-   `y` stands for **year**

-   `m` stands for **month**

-   `d` stands for **day**

-   `h`, `m`, `s` (used in date-time functions) stand for **hours**, **minutes**, and **seconds**

For example:

-   **`ymd()`** parses a string where the date components are in the order **year-month-day**.

-   **`mdy()`** parses a string formatted as **month-day-year**.

-   **`dmy()`** parses a string in **day-month-year** order.

```{=html}
<!-- -->
```
-   Functions: `ymd()`, `mdy()`, `dmy()`, `ymd_hms()`, `mdy_hms()`, `dmy_hms()`

```{r}
#| message: false
library(lubridate)

# Convert date strings to Date objects
date1 <- ymd("2024-09-30")
date1
date2 <- dmy("30-09-2024")
date2
date3 <- mdy("09/30/2024")
date3

# Convert to date-time
datetime1 <- ymd_hms("2024-09-21 14:45:00", tz = "UTC")
datetime1
datetime2 <- mdy_hms("09/21/2024 02:45:00 PM", tz = "America/New_York")
datetime2

```

By using specific functions for different formats (`ymd()`, `mdy()`, `dmy()`), you don’t need to worry about the order of date components. This ensures flexibility and reduces errors when working with various data sources.

These functions simplify the process by allowing you to focus only on the structure of the input data and not on specifying complex format strings, as would be necessary with base R functions like `as.Date()` or `strptime()`.

### Extracting Date-Time Components

Once you have parsed a date-time object using **lubridate**, you often need to extract or modify specific components, such as the year, month, day, or time. This is essential when analyzing data based on time periods, summarizing by year, or creating time-based features for models.

**Functions to Extract Date-Time Components**

Here are the most commonly used **lubridate** functions to extract specific parts of a date-time object:

-   **`year()`**: Extracts or sets the year.

-   **`month()`**: Extracts or sets the month. This function can also return the month’s name if `label = TRUE` is used.

-   **`day()`**: Extracts or sets the day of the month.

-   **`hour()`**: Extracts or sets the hour (for time-based objects).

-   **`minute()`**: Extracts or sets the minute.

-   **`second()`**: Extracts or sets the second.

-   **`wday()`**: Extracts the day of the week (can return the weekday’s name if `label = TRUE`).

-   **`yday()`**: Extracts the day of the year (1–365 or 366 for leap years).

-   **`mday()`**: Extracts the day of the month.

Let’s work with a parsed date-time object and extract its components:

```{r}
library(lubridate)

# Parsing a date-time object
datetime <- ymd_hms("2024-09-30 14:45:30")

# Extracting components
year(datetime)
month(datetime) 
day(datetime) 
hour(datetime) 
minute(datetime)
second(datetime)

# Extracting weekday
wday(datetime)
wday(datetime, label = TRUE)
```

In this example, we extracted different components of the date-time object. The `wday()` function can return the day of the week either as a number (1 for Sunday, 7 for Saturday) or as a label (the weekday name) when using `label = TRUE`.

In addition to extraction, **lubridate** allows you to modify specific components of a date or time without manually manipulating the entire string. This is particularly useful when you need to adjust dates or times in your data for analysis or alignment.

```{r}
# Modifying components
datetime
year(datetime) <- 2025
month(datetime) <- 12
hour(datetime) <- 8

datetime

```

In this example, the original date-time `2024-09-30 14:45:30` was modified to change the year, month, and hour, resulting in a new date-time value of `2025-12-21 08:45:30`.

**lubridate** allows you to extract and modify months or weekdays by name as well, which is particularly useful when working with human-readable data or when creating reports:

```{r}
# Extracting month by name
month(datetime, label = TRUE, abbr = FALSE)

# Changing the month by name
month(datetime) <- 7
datetime

```

In this example, `label = TRUE` and `abbr = FALSE` give the full name of the month (July) instead of the numeric value or abbreviation. You can also modify the month by name for more human-readable processing.

For higher-level time units such as weeks and quarters, **lubridate** offers convenient functions:

-   **`week()`**: Extracts the week of the year (1–52/53).

-   **`quarter()`**: Extracts the quarter of the year (1–4).

```{r}
# Extracting the week number
week(datetime)

# Extracting the quarter
quarter(datetime)

```

### Dealing with Time Zones

Another significant advantage of **lubridate** is that it handles time zones effectively when extracting date-time components. If you work with global datasets, being able to accurately account for time zones is crucial:

```{r}
# Set a different time zone
datetime
datetime_tz <- with_tz(datetime, "America/New_York")
datetime_tz

# Extract hour in the new time zone
hour(datetime_tz)

```

Here, we changed the time zone to Eastern Daylight Time (EDT) and extracted the hour component, which adjusted to the new time zone.

### **Creating Durations, Periods, and Intervals**

In data analysis, we often need to measure time spans, whether to calculate the difference between two dates, schedule recurring events, or model time-based phenomena. **lubridate** offers three powerful time-related concepts to handle these scenarios: **durations**, **periods**, and **intervals**. While they may seem similar, they each serve distinct purposes and behave differently depending on the use case.

#### **Durations**

A **duration** is an exact measurement of time, expressed in seconds. Durations are useful when you need precise, unambiguous time differences regardless of calendar variations (such as leap years, varying month lengths, or daylight saving changes).

-   **Duration syntax**: You can create durations using the `dseconds()`, `dminutes()`, `dhours()`, `ddays()`, `dweeks()`, `dyears()` functions.

```{r}

# Creating a duration of 1 day
one_day <- ddays(1)
one_day

# Duration of 2 hours and 30 minutes
duration_time <- dhours(2) + dminutes(30)
duration_time

# Adding a duration to a date
start_date <- ymd("2024-09-30")
end_date <- start_date + ddays(7)
end_date


```

In this example, **durations** are defined as fixed time lengths. Adding a duration to a date will move the date forward by the exact number of seconds, regardless of any irregularities in the calendar.

#### **Periods**

Unlike durations, **periods** are time spans measured in human calendar terms: years, months, days, hours, etc. Periods account for calendar variations, such as leap years and daylight saving time. This makes periods more intuitive for real-world use cases, but less precise in terms of exact seconds.

-   **Period syntax**: Use `years()`, `months()`, `weeks()`, `days()`, `hours()`, `minutes()`, `seconds()` functions to create periods.

```{r}

# Creating a period of 2 years, 3 months, and 10 days
my_period <- years(2) + months(3) + days(10)
my_period 

# Adding the period to a date
new_date <- start_date + my_period
new_date
```

In this example, the **period** accounts for differences in calendar length (such as varying days in months). The `start_date` was `2024-09-30`, and after adding 2 years, 3 months, and 10 days, the result is `2027-01-09`.

#### **Intervals**

An **interval** represents the time span between two specific dates or times. It is useful when you want to measure or compare spans between known start and end points. Intervals take into account the exact length of time between two dates, allowing you to calculate durations or periods over that span.

-   **Interval syntax**: Use the `interval()` function to create an interval between two dates or date-times.

```{r}
# Creating an interval between two dates
start_date <- ymd("2024-01-01")
end_date <- ymd("2024-12-31")
time_interval <- interval(start_date, end_date)
time_interval

# Checking how many days/weeks are in the interval
as.duration(time_interval)

```

In this example, an **interval** is created between `2024-01-01` and `2024-12-31`. The interval accounts for the exact time between the two dates, and using `as.duration()` allows us to calculate the number of seconds (or days/weeks) in that interval.

Sometimes you need to combine these time spans to perform calculations or model time-based processes. For example, you might want to measure the duration of an interval and adjust it using a period.

```{r}

# Create an interval between two dates
start_date <- ymd("2024-09-01")
end_date <- ymd("2024-12-01")
interval_span <- interval(start_date, end_date)
interval_span
# Extend the end date by 1 month
new_end_date <- end_date + months(1)

# Create a new interval with the updated end date
extended_interval <- interval(start_date, new_end_date)

# Display the extended interval
extended_interval


```

-   **Original interval**: We first create the interval `interval_span` between `2024-09-01` and `2024-12-01`.

-   **Adding 1 month**: Instead of adding the period to the interval directly, we add `months(1)` to the end date (`end_date + months(1)`).

-   **New interval**: We then create a new interval using the original start date and the updated end date (`new_end_date`).

### Date Arithmetic

Date arithmetic is a fundamental aspect of working with date-time data, especially in data analysis and time series forecasting. The **lubridate** package makes it easy to perform arithmetic operations on date-time objects, enabling users to manipulate dates effectively. This section discusses common date arithmetic operations, including adding and subtracting time intervals, calculating durations, and handling periods.

You can perform basic arithmetic operations directly on date-time objects. These operations include addition and subtraction of various time intervals.

**Adding Days to a Date:**

```{r}
# Define a starting date
start_date <- ymd("2024-01-01")

# Add 30 days to the starting date
new_date <- start_date + days(30)

# Display the new date
new_date

```

In this example:

-   We define a starting date using `ymd()`.

-   We add 30 days to this date using the `days()` function.

-   The result is a new date that is 30 days later.

**Subtracting Days from a Date:**

```{r}
# Subtract 15 days from the starting date
previous_date <- start_date - days(15)

# Display the previous date
previous_date
```

Here, we demonstrate how to subtract days from a date. This operation can also be performed with other time intervals, such as months, years, hours, etc.

Date arithmetic is commonly used in various practical applications, such as:

-   **Time Series Analysis**: Analyzing trends over specific periods (e.g., monthly sales growth).

-   **Event Planning**: Calculating the duration between events (e.g., project deadlines).

-   **Scheduling**: Determining time slots for meetings or tasks based on calendar events.

```{r}
# Define task durations
task_duration <- hours(3)  # Each task takes 3 hours
start_time <- ymd_hms("2024-01-01 09:00:00")

# Schedule three tasks
schedule <- start_time + task_duration * 0:2

# Display the schedule for tasks
schedule
```

In this example, we define a 3-hour task duration and schedule three tasks based on the start time, displaying their scheduled times.

## Using lubridate with Time Series Data in R

In time series analysis, properly handling date and time variables is crucial for ensuring accurate results. **lubridate** simplifies working with dates and times, but it's also important to know how to integrate it with base R's time series objects like `ts` and more flexible formats like date-time data frames.

### **Creating Time Series with `ts()` in R**

Base R’s `ts` function is typically used to create regular time series objects. Time series data must have a defined frequency (e.g., daily, monthly, quarterly) and a starting point.

```{r}
# Sample data: monthly sales from 2020 to 2022
sales_data <- c(100, 120, 150, 170, 160, 130, 140, 180, 200, 190, 210, 220,
                230, 250, 270, 300, 280, 260, 290, 310, 330, 340, 350, 360)

# Creating a time series object (monthly data starting from Jan 2020)
ts_sales <- ts(sales_data, start = c(2020, 1), frequency = 12)
ts_sales

```

This code creates a time series object representing monthly sales from January 2020 to December 2021.

-   `start = c(2020, 1)` indicates the time series starts in January 2020.

-   `frequency = 12` specifies that the data is monthly (12 periods per year).

### **Converting a `ts` Object to a Data Frame with a Date Variable**

When working with time series data, we often need to convert a `ts` object into a data frame to analyze it along with specific dates. **lubridate** can be used to handle date conversions easily.

```{r}

# Convert time series to a data frame with date information
sales_df <- data.frame(
  date = seq(ymd("2020-01-01"), by = "month", length.out = length(ts_sales)),
  sales = as.numeric(ts_sales)
)

# Display the resulting data frame
sales_df

```

In this example, we:

-   Convert the `ts` object to a numeric vector (`as.numeric(ts_sales)`).

-   Use `seq()` and **lubridate's** `ymd()` function to create a sequence of dates starting from `"2020-01-01"`, incrementing monthly (`by = "month"`).

-   The result is a data frame with a `date` column containing actual dates and a `sales` column with the sales data.

### **Creating Time Series from Date-Time Data**

Time series data can also be created directly from date-time information, such as daily, hourly, or minute-based data. **lubridate** can be used to efficiently generate or manipulate such time series.

```{r}
# Generate a sequence of daily dates
daily_dates <- seq(ymd("2023-01-01"), by = "day", length.out = 30)

# Create a sample dataset with random values for each day
daily_data <- data.frame(
  date = daily_dates,
  value = runif(30, min = 100, max = 200)
)

# View the first few rows of the dataset
head(daily_data)

```

In this example, we create a time series dataset for daily data:

-   **`ymd()`** is used to generate a sequence of daily dates starting from `"2023-01-01"`.

-   **`runif()`** generates random values to simulate daily observations.

You can use this type of time series in various analysis techniques, including plotting trends over time or aggregating data by week, month, or year.

### **Working with Time Series Intervals**

Sometimes, you need to manipulate time series data by grouping or splitting it into different intervals. **lubridate** makes this task easier by providing intuitive functions to work with intervals, durations, and periods.

```{r}
#| message: false
library(dplyr)

# Sample dataset: daily values over one month
set.seed(123)
time_series_data <- data.frame(
  date = seq(ymd("2023-01-01"), by = "day", length.out = 30),
  value = runif(30, min = 50, max = 150)
)

# Aggregating the data by week
weekly_data <- time_series_data |> 
  mutate(week = floor_date(date, "week")) |> 
  group_by(week) |> 
  summarize(weekly_avg = mean(value))

# View the aggregated data
weekly_data

```

Here, we use **lubridate's** `floor_date()` function to round each date down to the start of its respective week. The data is then grouped by week and summarized to compute the weekly average. This approach can easily be adapted for other time periods like months or quarters using `floor_date(date, "month")`.

### **Handling Irregular Time Series**

Not all time series data comes in regular intervals (e.g., daily, weekly). For irregular time series, **lubridate** can be used to efficiently handle missing or irregular dates.

```{r}
# Example of irregular dates (missing some days)
irregular_dates <- c(ymd("2023-01-01"), ymd("2023-01-02"), ymd("2023-01-05"),
                     ymd("2023-01-07"), ymd("2023-01-10"))

# Create a dataset with missing dates
irregular_data <- data.frame(
  date = irregular_dates,
  value = runif(5, min = 100, max = 200)
)

# Complete the time series by filling missing dates
complete_dates <- data.frame(
  date = seq(min(irregular_data$date), max(irregular_data$date), by = "day")
)

# Join the original data with the complete sequence of dates
complete_data <- merge(complete_dates, irregular_data, by = "date", all.x = TRUE)

# View the completed data with missing values
complete_data

```

In this example:

-   **lubridate**'s `ymd()` is used to handle irregular dates.

-   We fill missing dates by generating a complete sequence of dates (`seq()`) and merging it with the original data using `merge()`.

-   Missing values are introduced in the `value` column for dates that were absent in the original data.

### **Using Time Series Formats with `lubridate` Functions**

You can combine **lubridate** functions with base R's `ts` objects for more flexible time series analysis. For example, extracting specific components from a `ts` series, such as year, month, or week, can be achieved using **lubridate**.

```{r}
# Converting a ts object to a data frame with dates
ts_data <- ts(sales_data, start = c(2020, 1), frequency = 12)

# Create a data frame from the ts object
df_ts <- data.frame(
  date = seq(ymd("2020-01-01"), by = "month", length.out = length(ts_data)),
  sales = as.numeric(ts_data)
)

# Extract year and month using lubridate
df_ts <- df_ts %>%
  mutate(year = year(date), month = month(date))

# View the data with extracted components
df_ts

```

Here, we convert the `ts` object into a data frame and use **lubridate**'s `year()` and `month()` functions to extract date components, which can be used for further analysis (e.g., grouping by month or year).

## Solving Real-World Date-Time Issues

Handling date-time data in real-world applications often involves dealing with a variety of formats and potential inconsistencies. The **lubridate** package provides powerful functions to parse, manipulate, and format date-time data efficiently. This section focuses on how to use these functions, especially `parse_date_time()`, to address common date-time challenges.

When working with datasets, date-time values may not always be in a standard format. For instance, you might encounter dates represented as strings in various formats like `"YYYY-MM-DD"`, `"MM/DD/YYYY"`, or even `"Month DD, YYYY"`. To perform analysis accurately, it's crucial to convert these strings into proper date-time objects.

The `parse_date_time()` function is one of the most versatile functions in the **lubridate** package. It allows you to specify multiple possible formats for parsing a date-time string. This flexibility is especially useful when dealing with datasets from different sources or with inconsistent date formats.

```{r}
#| eval: false
parse_date_time(x, orders, tz = "UTC", quiet = FALSE)
```

-   **`x`**: A character vector of date-time strings to be parsed.

-   **`orders`**: A vector of possible formats for the date-time strings (e.g., `"ymd"`, `"mdy"`, etc.).

-   **`tz`**: The time zone to use (default is `"UTC"`).

-   **`quiet`**: If `TRUE`, suppress warnings.

```{r}

# Example date-time strings in various formats
dates <- c("2024-01-15", "01/16/2024", "March 17, 2024", "18-04-2024")

# Parse the dates using parse_date_time
parsed_dates <- parse_date_time(dates, orders = c("ymd", "mdy", "dmy", "B d, Y"))

# Display the parsed dates
parsed_dates

```

In this example:

-   The `dates` vector contains strings in various formats.

-   The `parse_date_time()` function attempts to parse each date according to the specified orders.

-   The output is a vector of parsed date-time objects, all converted to the same format.

## Alternative Packages and Comparison with `lubridate`

Several R packages can handle date-time data, each with its strengths and weaknesses. Below, we discuss these packages, comparing their functionalities with those of the **lubridate** package.

### **Base R Functions**

**Similarities:**

-   Both **lubridate** and base R offer essential functions for converting character strings to date or date-time objects (e.g., `as.Date()`, `as.POSIXct()`).

**Differences:**

-   Base R functions require more manual handling of date-time formats, whereas **lubridate** offers a more user-friendly and intuitive syntax for parsing and manipulating dates.

**Advantages of Base R:**

-   No additional package installation is required, making it lightweight.

-   Suitable for basic date-time manipulations.

**Disadvantages of Base R:**

-   Limited functionality for complex date-time operations.

-   Syntax can be less intuitive, especially for beginners.

### **`chron` Package**

**Similarities:**

-   Both **chron** and **lubridate** provide functionalities for working with dates and times, making it easy to manage these data types.

**Differences:**

-   **chron** is focused more on simpler date-time representations and does not handle time zones as effectively as **lubridate**.

**Advantages of `chron`:**

-   Straightforward for handling date-time data without complexity.

-   Lightweight and easy to use for simple applications.

**Disadvantages of `chron`:**

-   Lacks advanced features for manipulating dates and times.

-   Limited support for time zones and complex date-time arithmetic.

### **`data.table` Package**

**Similarities:**

-   Both packages allow for efficient date-time operations, and **data.table** provides functions to convert to date objects (e.g., `as.IDate()`).

**Differences:**

-   **data.table** is primarily a data manipulation package optimized for speed and performance, whereas **lubridate** focuses specifically on date-time operations.

**Advantages of `data.table`:**

-   Excellent performance with large datasets.

-   Integrates well with data manipulation tasks, including date-time operations.

**Disadvantages of `data.table`:**

-   More complex syntax, especially for users unfamiliar with data.table conventions.

-   Primarily focused on data manipulation rather than dedicated date-time handling.

### **`zoo` and `xts` Packages**

**Similarities:**

-   Both **zoo** and **xts** provide tools for handling time series data and can manage date-time objects effectively.

**Differences:**

-   **lubridate** excels in date-time parsing and manipulation, while **zoo** and **xts** focus more on creating and manipulating time series objects.

**Advantages of `zoo` and `xts`:**

-   Specialized for handling irregularly spaced time series.

-   Provides robust tools for time series analysis, including indexing and subsetting.

**Disadvantages of `zoo` and `xts`:**

-   Not as intuitive for general date-time manipulation tasks.

-   Requires additional knowledge of time series concepts.

### Advantages of `lubridate`

1.  **User-Friendly Syntax**: **lubridate** offers intuitive functions for parsing, manipulating, and formatting date-time objects, making it accessible to users of all skill levels.

2.  **Flexible Parsing**: It can automatically recognize and parse multiple date-time formats, reducing the need for manual formatting.

3.  **Comprehensive Functionality**: Provides a wide range of functions for date-time arithmetic, extracting components, and working with durations, periods, and intervals.

4.  **Time Zone Handling**: Strong support for working with time zones, making it easy to convert between different zones.

### Disadvantages of `lubridate`

1.  **Performance**: For very large datasets, **lubridate** may not be as performant as packages like **data.table** or **xts** due to its more extensive functionality and overhead.

2.  **Learning Curve**: Although user-friendly, beginners may still face a learning curve when transitioning from basic date-time manipulation in base R to more advanced functionalities in **lubridate**.

3.  **Dependency**: Requires installation of an additional package, which may not be ideal for all projects or environments.

### Conclusion

The `lubridate` package is a powerful tool for handling date and time data in R, offering user-friendly functions for parsing, manipulating, and formatting date-time objects. Key features include:

-   **Flexible Parsing**: Functions like `ymd()`, `mdy()`, and `parse_date_time()` make it easy to convert various formats into date-time objects.

-   **Component Extraction**: Extracting components such as year, month, and day with functions like `year()` and `month()` simplifies detailed analysis.

-   **Time Measurements**: Creating durations, periods, and intervals allows for nuanced time calculations, enhancing temporal analysis.

While `lubridate` excels in usability and flexibility, it's important to consider its performance limitations with large datasets and the potential learning curve for new users. Comparing it with alternatives like base R, `chron`, `data.table`, `zoo`, and `xts` reveals that each package has its strengths, but `lubridate` stands out for its comprehensive approach to date-time manipulation.

Incorporating `lubridate` into your R workflow will streamline your date-time processing, enabling more efficient data analysis and deeper insights.

For more information, refer to the [official lubridate documentation](https://lubridate.tidyverse.org/).
