{
  "hash": "93c3849065196f2f841528d0c5b2e1b5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Extracting Data from OECD Databases in R: Using the oecd and rsdmx Packages\"\nauthor: \"M. Fatih Tüzen\"\ndate: \"2024-12-16\"\ncategories: [R Programming, OECD, rsdmx , Import, API]\n---\n\n\n\n## Introduction\n\nThe **OECD (Organisation for Economic Co-operation and Development)** provides extensive databases for economic, social, and environmental indicators. Accessing these programmatically through R is efficient and reproducible. In this article, we explore two popular R packages for accessing OECD data—**`oecd`** and **`rsdmx`**—and discuss critical updates to the OECD Developer API that have impacted package functionality.\n\nWe also provide practical examples, emphasize the importance of applying filters during data retrieval, and guide users on how to work with the latest tools to ensure seamless data access.\n\n## Why Programmatic Access Matters\n\nAccessing data programmatically offers several benefits:\n\n1.  **Customization**: Tailor requests to retrieve only the data you need (e.g., specific countries, indicators, and years).\n\n2.  **Efficiency**: Save time and bandwidth by filtering data before download.\n\n3.  **Reproducibility**: Ensure that analyses can be easily updated or shared.\n\n4.  **Automation**: Streamline workflows by automating data extraction.\n\n## OECD Data Explorer: Exploring and Accessing Data\n\nThe OECD provides programmatic access to OECD data for OECD countries and selected non-member economies through a RESTful application programming interface (API) based on the SDMX standard. The APIs allow developers to easily query the OECD data in several ways to create innovative software applications which use dynamically updated OECD data.\n\nThe **OECD Data Explorer** is an interactive web-based platform that allows users to explore, visualize, and download data from the OECD databases. It is particularly useful for users who want to manually browse through datasets before deciding on specific data points for analysis. Here, we provide an overview of the **OECD Data Explorer**, including how to navigate the platform, customize filters, and access API links for programmatic use.\n\nThe OECD Data Explorer is available at: <https://data-explorer.oecd.org/>\n\n![](images/oecd_data_explorer.png){fig-align=\"center\"}\n\nWhen you visit the site, you are greeted with a clean interface for navigating through datasets. The platform organizes data into **themes** such as;\n\n-   Economy\n\n-   Education\n\n-   Environment\n\n-   Health\n\n-   Innovation and Technology\n\n-   Employment\n\nEach theme contains various datasets that can be explored interactively.\n\n### Using the OECD Data Explorer\n\n#### 1. **Search for a Dataset**\n\nThe search bar allows you to quickly locate datasets. For example, if you are interested in unemployment data, simply type \"unemployment\" in the search bar.\n\n#### 2. **Customize Filters**\n\nOnce you’ve selected a dataset (e.g., *Labour Market Statistics*), you can apply various filters to narrow down the data you need. Some of them are given below:\n\n-   **Geographical Region**: Choose specific countries or regions (e.g., USA, France, OECD Total).\n\n-   **Time Period**: Select years of interest (e.g., 2015–2023).\n\n-   **Indicator**: Specify what you are analyzing (e.g., Unemployment Rate, Employment-to-Population Ratio).\n\n-   **Measurement Units**: Choose relevant units (e.g., percentages, index values).\n\n#### 3. **Explore Data Visualizations**\n\nThe platform provides instant visualizations, such as tables, line charts, and bar charts, based on your selected filters. These visualizations make it easy to understand trends and patterns in the data.\n\n#### 4. Exporting Data\n\nOnce you’ve customized the dataset, you can download in available formats, such as **Excel** or **CSV** by manually. the other choice is accessing the API Link. For programmatic access, the **OECD Data Explorer** provides API links that can be used in R or other programming languages. After selecting your filters, click on the **Developer API** and copy the generated link.\n\nFor example, let's want to pull data about the unemployment rates of some countries. After applying the filters I want, such a link will be created.\n\n`https://sdmx.oecd.org/public/rest/data/OECD.SDD.TPS,DSD_LFS@DF_IALFS_UNE_M,1.0/BEL+AUS+AUT+CAN+DNK+FRA+DEU+GRC+HUN+IRL+ITA+JPN+NLD+NZL+NOR+PRT+SVN+ESP+SWE+CHE+USA+GBR+TUR..PT_LF_SUB._Z.Y._T.Y_GE15..M?startPeriod=2023-11&dimensionAtObservation=AllDimensions`\n\nThis link can be directly used with R packages like `rsdmx` to fetch data programmatically.\n\n![](images/data_page.png){fig-align=\"center\"}\n\nAlso you can get detailed information from <https://www.oecd.org/en/data/insights/data-explainers/2024/09/api.html>. This page provides detailed information on how to programmatically retrieve data from the OECD Data Explorer via the API.\n\n## The `OECD` Package: Accessing OECD Data in R\n\nThe **`oecd`** package is an R package designed to provide a convenient interface for accessing data from the **OECD Developer API**. It allows users to:\n\n-   Explore available datasets in the OECD databases.\n\n-   Retrieve filtered data programmatically for specific countries, indicators, and time periods.\n\n-   Work with data in a reproducible way directly within R.\n\nHowever, the version of the **`OECD`** package available on **CRAN** is currently **outdated** due to recent changes in the OECD API (2024). These changes have impacted the functionality of some key features in the CRAN release. You can find more information about changes in the OECD API from [https://www.oecd.org/en/data/insights/data-explainers/2024/09/OECD-DE-FAQ.html](#0).\n\nTo overcome these limitations, it is recommended to use the **updated version** of the `OECD`package available on GitHub, which is fully compatible with the latest OECD API.\n\nFor installation and usage details, refer to the updated package repository:\\\n[**https://github.com/expersso/OECD**](https://github.com/expersso/OECD)\n\n**Installing the Updated `oecd` Package:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install devtools if not already installed\ninstall.packages(\"devtools\")\n\n# Install the updated oecd package from GitHub\ndevtools::install_github(\"expersso/OECD\")\n```\n:::\n\n\n\nThe updated version of the **`OECD`**package simplifies interaction with the OECD API, focusing on just two core functions: **`get_data_structure()`** and **`get_dataset()`**. Here's a brief overview of their functionality and arguments:\n\n### 1. **`get_data_structure()`**\n\nThis function retrieves metadata about a specific dataset from the OECD API. It provides information about variables, classifications, adjustments, unit measures etc. For example, we can access this information about the unemployment rates of some countries by taking the code of the relevant data set from the link given above. Then we can extract dataset information from the link we received from the developer API section, starting with slash (/) after the data expression and up to the next slash (Shown in blue in screenshot).\n\n![](images/data_query.png){fig-align=\"center\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(OECD)\ndataset_unemprate <- \"OECD.SDD.TPS,DSD_LFS@DF_IALFS_UNE_M,1.0\"\ndata_str <- get_data_structure(dataset_unemprate)\nstr(data_str, max.level = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 15\n $ VAR_DESC               :'data.frame':\t17 obs. of  2 variables:\n $ CL_ACTIVITY_ISIC4      :'data.frame':\t958 obs. of  2 variables:\n $ CL_ADJUSTMENT          :'data.frame':\t17 obs. of  2 variables:\n $ CL_AGE                 :'data.frame':\t308 obs. of  2 variables:\n $ CL_AREA                :'data.frame':\t469 obs. of  2 variables:\n $ CL_SECTOR              :'data.frame':\t216 obs. of  2 variables:\n $ CL_SEX                 :'data.frame':\t7 obs. of  2 variables:\n $ CL_TRANSFORMATION      :'data.frame':\t59 obs. of  2 variables:\n $ CL_UNIT_MEASURE        :'data.frame':\t670 obs. of  2 variables:\n $ CL_WORKER_STATUS_ICSE93:'data.frame':\t13 obs. of  2 variables:\n $ CL_MEASURE_LFS_TPS     :'data.frame':\t30 obs. of  2 variables:\n $ CL_DECIMALS            :'data.frame':\t16 obs. of  2 variables:\n $ CL_FREQ                :'data.frame':\t34 obs. of  2 variables:\n $ CL_OBS_STATUS          :'data.frame':\t20 obs. of  4 variables:\n $ CL_UNIT_MULT           :'data.frame':\t31 obs. of  4 variables:\n```\n\n\n:::\n:::\n\n\n\n### 2. **`get_dataset()`**\n\nThis function retrieves the actual data from a specified dataset, with optional filters for dimensions like country, time, and indicators.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_dataset(\n  dataset,\n  filter = NULL,\n  start_time = NULL,\n  end_time = NULL,\n  last_n_observations = NULL,\n  ...\n)\n```\n:::\n\n\n\nFor filters, you need to start with \"/\" after the part for dataset and take it until question mark \"?\". But be careful, don't include question mark. For the time filtering, start_time or end_time arguments can be used.\n\n![](images/data_query_filters.png){fig-align=\"center\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_filters_unemprate <- \"BEL+AUS+AUT+CAN+DNK+FRA+DEU+GRC+HUN+IRL+ITA+JPN+NLD+NZL+NOR+PRT+SVN+ESP+SWE+CHE+USA+GBR+TUR..PT_LF_SUB._Z.Y._T.Y_GE15..M\"\n\ndf <- get_dataset(dataset = dataset_unemprate,\n                  filter = data_filters_unemprate,\n                  start_time = 2014)\n\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ACTIVITY ADJUSTMENT    AGE DECIMALS FREQ  MEASURE OBS_STATUS ObsValue\n1       _Z          Y Y_GE15        1    M UNE_LF_M          A      3.6\n2       _Z          Y Y_GE15        1    M UNE_LF_M          A      3.7\n3       _Z          Y Y_GE15        1    M UNE_LF_M          A      5.5\n4       _Z          Y Y_GE15        1    M UNE_LF_M          A      5.6\n5       _Z          Y Y_GE15        1    M UNE_LF_M          A      5.7\n6       _Z          Y Y_GE15        1    M UNE_LF_M          A      4.3\n  REF_AREA SEX TIME_PERIOD TRANSFORMATION UNIT_MEASURE UNIT_MULT\n1      USA  _T     2019-06             _Z    PT_LF_SUB         0\n2      USA  _T     2019-07             _Z    PT_LF_SUB         0\n3      BEL  _T     2024-06             _Z    PT_LF_SUB         0\n4      BEL  _T     2024-07             _Z    PT_LF_SUB         0\n5      BEL  _T     2024-08             _Z    PT_LF_SUB         0\n6      DEU  _T     2015-08             _Z    PT_LF_SUB         0\n```\n\n\n:::\n:::\n\n\n\n## Using the `rsdmx` Package\n\nThe `rsdmx` package allows interaction with the OECD Developer API through **SDMX format**. It is particularly useful if you prefer working directly with API URLs.\n\n### Installing the `rsdmx` Package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"rsdmx\")\n```\n:::\n\n\n\n#### Key Functions in `rsdmx`\n\n1.  **`readSDMX()`**: Fetches data from an SDMX-compatible API endpoint.\n\n2.  **`as.data.frame()`**: Converts the retrieved SDMX object into a data frame.\n\n#### Example Workflow with `rsdmx`\n\nHere’s how you can retrieve unemployment data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the rsdmx package\nlibrary(rsdmx)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'rsdmx' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Define the API URL for unemployment rates\noecd_url <- \"https://sdmx.oecd.org/public/rest/data/OECD.SDD.TPS,DSD_LFS@DF_IALFS_UNE_M,1.0/BEL+AUS+AUT+CAN+DNK+FRA+DEU+GRC+HUN+IRL+ITA+JPN+NLD+NZL+NOR+PRT+SVN+ESP+SWE+CHE+USA+GBR+TUR..PT_LF_SUB._Z.Y._T.Y_GE15..M?startPeriod=2023-11&dimensionAtObservation=AllDimensions\"\n\n# Step 1: Fetch the data\nunemployment_data <- readSDMX(oecd_url)\n\n# Step 2: Convert to a data frame\nunemployment_df <- as.data.frame(unemployment_data)\n\n# View the data\nhead(unemployment_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  TIME_PERIOD REF_AREA  MEASURE UNIT_MEASURE TRANSFORMATION ADJUSTMENT SEX\n1     2024-03      ITA UNE_LF_M    PT_LF_SUB             _Z          Y  _T\n2     2024-04      ITA UNE_LF_M    PT_LF_SUB             _Z          Y  _T\n3     2024-08      BEL UNE_LF_M    PT_LF_SUB             _Z          Y  _T\n4     2024-09      BEL UNE_LF_M    PT_LF_SUB             _Z          Y  _T\n5     2024-10      BEL UNE_LF_M    PT_LF_SUB             _Z          Y  _T\n6     2023-12      SVN UNE_LF_M    PT_LF_SUB             _Z          Y  _T\n     AGE ACTIVITY FREQ obsValue UNIT_MULT DECIMALS OBS_STATUS\n1 Y_GE15       _Z    M      6.9         0        1          A\n2 Y_GE15       _Z    M      6.7         0        1          A\n3 Y_GE15       _Z    M      5.7         0        1          A\n4 Y_GE15       _Z    M      5.8         0        1          A\n5 Y_GE15       _Z    M      5.8         0        1          A\n6 Y_GE15       _Z    M      3.4         0        1          A\n```\n\n\n:::\n:::\n\n\n\n## Conclusion\n\nBoth `oecd` and `rsdmx` allow you to specify filters directly in your API request, which is critical for:\n\n1.  **Time Efficiency**: Smaller, focused datasets download faster.\n\n2.  **Storage Optimization**: Filtering minimizes the size of the retrieved dataset.\n\n3.  **Simpler Analysis**: Pre-filtered data reduces the need for extensive preprocessing.\n\nWhen working with OECD databases in R, the updated version of the `oecd` package (available on GitHub) is a reliable choice, provided you install it from its GitHub repository. If you prefer working directly with API URLs, the `rsdmx` package is another strong option.\n\nRegardless of the package, applying filters in your data requests is essential to ensure efficiency and reproducibility. By integrating these tools into your workflow, you can access OECD data programmatically and focus on the analysis itself.\n\n## References\n\n1.  [**OECD Data Explorer**](https://data-explorer.oecd.org/)\n\n2.  [**OECD Data via API**](https://www.oecd.org/en/data/insights/data-explainers/2024/09/api.html)\n\n3.  [**Updated `oecd` Package on GitHub**](https://github.com/expersso/OECD)\n\n4.  [**`rsdmx` Package Documentation**](https://cran.r-project.org/web/packages/rsdmx/index.html)\n\n5.  [OECD Data API documentation](https://gitlab.algobank.oecd.org/public-documentation/dotstat-migration/-/raw/main/OECD_Data_API_documentation.pdf)\n\n6.  [Upgrading your queries from the legacy OECD.Stat APIs to the new OECD Data API](https://gitlab.algobank.oecd.org/public-documentation/dotstat-migration/-/raw/main/OECD_Data_API_documentation-Upgrading_from_the_legacy_OECD.Stat_APIs.pdf)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}